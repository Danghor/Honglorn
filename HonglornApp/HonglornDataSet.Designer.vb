'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("HLDS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class HLDS
    Inherits Global.System.Data.DataSet
    
    Private tableclass As classDataTable
    
    Private tabletraditionalreportmeta As traditionalreportmetaDataTable
    
    Private tableclassdisciplinerel As classdisciplinerelDataTable
    
    Private tablecompetition As competitionDataTable
    
    Private tablecompetitiondiscipline As competitiondisciplineDataTable
    
    Private tablecompetitiondisciplinecollection As competitiondisciplinecollectionDataTable
    
    Private tablecompetitionreportmeta As competitionreportmetaDataTable
    
    Private tablecourseclassrel As courseclassrelDataTable
    
    Private tablestudent As studentDataTable
    
    Private tablestudentcourserel As studentcourserelDataTable
    
    Private tabletraditionaldiscipline As traditionaldisciplineDataTable
    
    Private tabletraditionaldisciplinecollection As traditionaldisciplinecollectionDataTable
    
    Private tableYearsWithStudentData As YearsWithStudentDataDataTable
    
    Private relationClassDisciplineRel_ClassName_FK As Global.System.Data.DataRelation
    
    Private relationClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK As Global.System.Data.DataRelation
    
    Private relationClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetition_StudentPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_FemaleJumpPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_FemaleSprintPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_FemaleThrowPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_MaleJumpPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_MaleSprintPKey_FK As Global.System.Data.DataRelation
    
    Private relationCompetitionDisciplineCollection_MaleThrowPKey_FK As Global.System.Data.DataRelation
    
    Private relationCourseClassRel_ClassName_FK As Global.System.Data.DataRelation
    
    Private relationStudentCourseRel_CoursePKey_FK As Global.System.Data.DataRelation
    
    Private relationStudentCourseRel_StudentPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_FemaleJumpPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_FemaleSprintPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_FemaleThrowPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_MaleJumpPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_MaleSprintPKey_FK As Global.System.Data.DataRelation
    
    Private relationTraditionalDisciplineCollection_MaleThrowPKey_FK As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Class")) Is Nothing) Then
                MyBase.Tables.Add(New classDataTable(ds.Tables("Class")))
            End If
            If (Not (ds.Tables("TraditionalReportMeta")) Is Nothing) Then
                MyBase.Tables.Add(New traditionalreportmetaDataTable(ds.Tables("TraditionalReportMeta")))
            End If
            If (Not (ds.Tables("ClassDisciplineRel")) Is Nothing) Then
                MyBase.Tables.Add(New classdisciplinerelDataTable(ds.Tables("ClassDisciplineRel")))
            End If
            If (Not (ds.Tables("Competition")) Is Nothing) Then
                MyBase.Tables.Add(New competitionDataTable(ds.Tables("Competition")))
            End If
            If (Not (ds.Tables("CompetitionDiscipline")) Is Nothing) Then
                MyBase.Tables.Add(New competitiondisciplineDataTable(ds.Tables("CompetitionDiscipline")))
            End If
            If (Not (ds.Tables("CompetitionDisciplineCollection")) Is Nothing) Then
                MyBase.Tables.Add(New competitiondisciplinecollectionDataTable(ds.Tables("CompetitionDisciplineCollection")))
            End If
            If (Not (ds.Tables("CompetitionReportMeta")) Is Nothing) Then
                MyBase.Tables.Add(New competitionreportmetaDataTable(ds.Tables("CompetitionReportMeta")))
            End If
            If (Not (ds.Tables("CourseClassRel")) Is Nothing) Then
                MyBase.Tables.Add(New courseclassrelDataTable(ds.Tables("CourseClassRel")))
            End If
            If (Not (ds.Tables("Student")) Is Nothing) Then
                MyBase.Tables.Add(New studentDataTable(ds.Tables("Student")))
            End If
            If (Not (ds.Tables("StudentCourseRel")) Is Nothing) Then
                MyBase.Tables.Add(New studentcourserelDataTable(ds.Tables("StudentCourseRel")))
            End If
            If (Not (ds.Tables("TraditionalDiscipline")) Is Nothing) Then
                MyBase.Tables.Add(New traditionaldisciplineDataTable(ds.Tables("TraditionalDiscipline")))
            End If
            If (Not (ds.Tables("TraditionalDisciplineCollection")) Is Nothing) Then
                MyBase.Tables.Add(New traditionaldisciplinecollectionDataTable(ds.Tables("TraditionalDisciplineCollection")))
            End If
            If (Not (ds.Tables("YearsWithStudentData")) Is Nothing) Then
                MyBase.Tables.Add(New YearsWithStudentDataDataTable(ds.Tables("YearsWithStudentData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _class() As classDataTable
        Get
            Return Me.tableclass
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property traditionalreportmeta() As traditionalreportmetaDataTable
        Get
            Return Me.tabletraditionalreportmeta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property classdisciplinerel() As classdisciplinerelDataTable
        Get
            Return Me.tableclassdisciplinerel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property competition() As competitionDataTable
        Get
            Return Me.tablecompetition
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property competitiondiscipline() As competitiondisciplineDataTable
        Get
            Return Me.tablecompetitiondiscipline
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property competitiondisciplinecollection() As competitiondisciplinecollectionDataTable
        Get
            Return Me.tablecompetitiondisciplinecollection
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property competitionreportmeta() As competitionreportmetaDataTable
        Get
            Return Me.tablecompetitionreportmeta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property courseclassrel() As courseclassrelDataTable
        Get
            Return Me.tablecourseclassrel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property student() As studentDataTable
        Get
            Return Me.tablestudent
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property studentcourserel() As studentcourserelDataTable
        Get
            Return Me.tablestudentcourserel
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property traditionaldiscipline() As traditionaldisciplineDataTable
        Get
            Return Me.tabletraditionaldiscipline
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property traditionaldisciplinecollection() As traditionaldisciplinecollectionDataTable
        Get
            Return Me.tabletraditionaldisciplinecollection
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property YearsWithStudentData() As YearsWithStudentDataDataTable
        Get
            Return Me.tableYearsWithStudentData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As HLDS = CType(MyBase.Clone,HLDS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("Class")) Is Nothing) Then
                MyBase.Tables.Add(New classDataTable(ds.Tables("Class")))
            End If
            If (Not (ds.Tables("TraditionalReportMeta")) Is Nothing) Then
                MyBase.Tables.Add(New traditionalreportmetaDataTable(ds.Tables("TraditionalReportMeta")))
            End If
            If (Not (ds.Tables("ClassDisciplineRel")) Is Nothing) Then
                MyBase.Tables.Add(New classdisciplinerelDataTable(ds.Tables("ClassDisciplineRel")))
            End If
            If (Not (ds.Tables("Competition")) Is Nothing) Then
                MyBase.Tables.Add(New competitionDataTable(ds.Tables("Competition")))
            End If
            If (Not (ds.Tables("CompetitionDiscipline")) Is Nothing) Then
                MyBase.Tables.Add(New competitiondisciplineDataTable(ds.Tables("CompetitionDiscipline")))
            End If
            If (Not (ds.Tables("CompetitionDisciplineCollection")) Is Nothing) Then
                MyBase.Tables.Add(New competitiondisciplinecollectionDataTable(ds.Tables("CompetitionDisciplineCollection")))
            End If
            If (Not (ds.Tables("CompetitionReportMeta")) Is Nothing) Then
                MyBase.Tables.Add(New competitionreportmetaDataTable(ds.Tables("CompetitionReportMeta")))
            End If
            If (Not (ds.Tables("CourseClassRel")) Is Nothing) Then
                MyBase.Tables.Add(New courseclassrelDataTable(ds.Tables("CourseClassRel")))
            End If
            If (Not (ds.Tables("Student")) Is Nothing) Then
                MyBase.Tables.Add(New studentDataTable(ds.Tables("Student")))
            End If
            If (Not (ds.Tables("StudentCourseRel")) Is Nothing) Then
                MyBase.Tables.Add(New studentcourserelDataTable(ds.Tables("StudentCourseRel")))
            End If
            If (Not (ds.Tables("TraditionalDiscipline")) Is Nothing) Then
                MyBase.Tables.Add(New traditionaldisciplineDataTable(ds.Tables("TraditionalDiscipline")))
            End If
            If (Not (ds.Tables("TraditionalDisciplineCollection")) Is Nothing) Then
                MyBase.Tables.Add(New traditionaldisciplinecollectionDataTable(ds.Tables("TraditionalDisciplineCollection")))
            End If
            If (Not (ds.Tables("YearsWithStudentData")) Is Nothing) Then
                MyBase.Tables.Add(New YearsWithStudentDataDataTable(ds.Tables("YearsWithStudentData")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableclass = CType(MyBase.Tables("Class"),classDataTable)
        If (initTable = true) Then
            If (Not (Me.tableclass) Is Nothing) Then
                Me.tableclass.InitVars
            End If
        End If
        Me.tabletraditionalreportmeta = CType(MyBase.Tables("TraditionalReportMeta"),traditionalreportmetaDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletraditionalreportmeta) Is Nothing) Then
                Me.tabletraditionalreportmeta.InitVars
            End If
        End If
        Me.tableclassdisciplinerel = CType(MyBase.Tables("ClassDisciplineRel"),classdisciplinerelDataTable)
        If (initTable = true) Then
            If (Not (Me.tableclassdisciplinerel) Is Nothing) Then
                Me.tableclassdisciplinerel.InitVars
            End If
        End If
        Me.tablecompetition = CType(MyBase.Tables("Competition"),competitionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompetition) Is Nothing) Then
                Me.tablecompetition.InitVars
            End If
        End If
        Me.tablecompetitiondiscipline = CType(MyBase.Tables("CompetitionDiscipline"),competitiondisciplineDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompetitiondiscipline) Is Nothing) Then
                Me.tablecompetitiondiscipline.InitVars
            End If
        End If
        Me.tablecompetitiondisciplinecollection = CType(MyBase.Tables("CompetitionDisciplineCollection"),competitiondisciplinecollectionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompetitiondisciplinecollection) Is Nothing) Then
                Me.tablecompetitiondisciplinecollection.InitVars
            End If
        End If
        Me.tablecompetitionreportmeta = CType(MyBase.Tables("CompetitionReportMeta"),competitionreportmetaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecompetitionreportmeta) Is Nothing) Then
                Me.tablecompetitionreportmeta.InitVars
            End If
        End If
        Me.tablecourseclassrel = CType(MyBase.Tables("CourseClassRel"),courseclassrelDataTable)
        If (initTable = true) Then
            If (Not (Me.tablecourseclassrel) Is Nothing) Then
                Me.tablecourseclassrel.InitVars
            End If
        End If
        Me.tablestudent = CType(MyBase.Tables("Student"),studentDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudent) Is Nothing) Then
                Me.tablestudent.InitVars
            End If
        End If
        Me.tablestudentcourserel = CType(MyBase.Tables("StudentCourseRel"),studentcourserelDataTable)
        If (initTable = true) Then
            If (Not (Me.tablestudentcourserel) Is Nothing) Then
                Me.tablestudentcourserel.InitVars
            End If
        End If
        Me.tabletraditionaldiscipline = CType(MyBase.Tables("TraditionalDiscipline"),traditionaldisciplineDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletraditionaldiscipline) Is Nothing) Then
                Me.tabletraditionaldiscipline.InitVars
            End If
        End If
        Me.tabletraditionaldisciplinecollection = CType(MyBase.Tables("TraditionalDisciplineCollection"),traditionaldisciplinecollectionDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletraditionaldisciplinecollection) Is Nothing) Then
                Me.tabletraditionaldisciplinecollection.InitVars
            End If
        End If
        Me.tableYearsWithStudentData = CType(MyBase.Tables("YearsWithStudentData"),YearsWithStudentDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableYearsWithStudentData) Is Nothing) Then
                Me.tableYearsWithStudentData.InitVars
            End If
        End If
        Me.relationClassDisciplineRel_ClassName_FK = Me.Relations("ClassDisciplineRel_ClassName_FK")
        Me.relationClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK = Me.Relations("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK")
        Me.relationClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK = Me.Relations("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK")
        Me.relationCompetition_StudentPKey_FK = Me.Relations("Competition_StudentPKey_FK")
        Me.relationCompetitionDisciplineCollection_FemaleJumpPKey_FK = Me.Relations("CompetitionDisciplineCollection_FemaleJumpPKey_FK")
        Me.relationCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK = Me.Relations("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK")
        Me.relationCompetitionDisciplineCollection_FemaleSprintPKey_FK = Me.Relations("CompetitionDisciplineCollection_FemaleSprintPKey_FK")
        Me.relationCompetitionDisciplineCollection_FemaleThrowPKey_FK = Me.Relations("CompetitionDisciplineCollection_FemaleThrowPKey_FK")
        Me.relationCompetitionDisciplineCollection_MaleJumpPKey_FK = Me.Relations("CompetitionDisciplineCollection_MaleJumpPKey_FK")
        Me.relationCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK = Me.Relations("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK")
        Me.relationCompetitionDisciplineCollection_MaleSprintPKey_FK = Me.Relations("CompetitionDisciplineCollection_MaleSprintPKey_FK")
        Me.relationCompetitionDisciplineCollection_MaleThrowPKey_FK = Me.Relations("CompetitionDisciplineCollection_MaleThrowPKey_FK")
        Me.relationCourseClassRel_ClassName_FK = Me.Relations("CourseClassRel_ClassName_FK")
        Me.relationStudentCourseRel_CoursePKey_FK = Me.Relations("StudentCourseRel_CoursePKey_FK")
        Me.relationStudentCourseRel_StudentPKey_FK = Me.Relations("StudentCourseRel_StudentPKey_FK")
        Me.relationTraditionalDisciplineCollection_FemaleJumpPKey_FK = Me.Relations("TraditionalDisciplineCollection_FemaleJumpPKey_FK")
        Me.relationTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK = Me.Relations("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK")
        Me.relationTraditionalDisciplineCollection_FemaleSprintPKey_FK = Me.Relations("TraditionalDisciplineCollection_FemaleSprintPKey_FK")
        Me.relationTraditionalDisciplineCollection_FemaleThrowPKey_FK = Me.Relations("TraditionalDisciplineCollection_FemaleThrowPKey_FK")
        Me.relationTraditionalDisciplineCollection_MaleJumpPKey_FK = Me.Relations("TraditionalDisciplineCollection_MaleJumpPKey_FK")
        Me.relationTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK = Me.Relations("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK")
        Me.relationTraditionalDisciplineCollection_MaleSprintPKey_FK = Me.Relations("TraditionalDisciplineCollection_MaleSprintPKey_FK")
        Me.relationTraditionalDisciplineCollection_MaleThrowPKey_FK = Me.Relations("TraditionalDisciplineCollection_MaleThrowPKey_FK")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "HLDS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/HonglornDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableclass = New classDataTable()
        MyBase.Tables.Add(Me.tableclass)
        Me.tabletraditionalreportmeta = New traditionalreportmetaDataTable()
        MyBase.Tables.Add(Me.tabletraditionalreportmeta)
        Me.tableclassdisciplinerel = New classdisciplinerelDataTable()
        MyBase.Tables.Add(Me.tableclassdisciplinerel)
        Me.tablecompetition = New competitionDataTable()
        MyBase.Tables.Add(Me.tablecompetition)
        Me.tablecompetitiondiscipline = New competitiondisciplineDataTable()
        MyBase.Tables.Add(Me.tablecompetitiondiscipline)
        Me.tablecompetitiondisciplinecollection = New competitiondisciplinecollectionDataTable()
        MyBase.Tables.Add(Me.tablecompetitiondisciplinecollection)
        Me.tablecompetitionreportmeta = New competitionreportmetaDataTable()
        MyBase.Tables.Add(Me.tablecompetitionreportmeta)
        Me.tablecourseclassrel = New courseclassrelDataTable()
        MyBase.Tables.Add(Me.tablecourseclassrel)
        Me.tablestudent = New studentDataTable()
        MyBase.Tables.Add(Me.tablestudent)
        Me.tablestudentcourserel = New studentcourserelDataTable()
        MyBase.Tables.Add(Me.tablestudentcourserel)
        Me.tabletraditionaldiscipline = New traditionaldisciplineDataTable()
        MyBase.Tables.Add(Me.tabletraditionaldiscipline)
        Me.tabletraditionaldisciplinecollection = New traditionaldisciplinecollectionDataTable()
        MyBase.Tables.Add(Me.tabletraditionaldisciplinecollection)
        Me.tableYearsWithStudentData = New YearsWithStudentDataDataTable()
        MyBase.Tables.Add(Me.tableYearsWithStudentData)
        Me.relationClassDisciplineRel_ClassName_FK = New Global.System.Data.DataRelation("ClassDisciplineRel_ClassName_FK", New Global.System.Data.DataColumn() {Me.tableclass.NameColumn}, New Global.System.Data.DataColumn() {Me.tableclassdisciplinerel.ClassNameColumn}, false)
        Me.Relations.Add(Me.relationClassDisciplineRel_ClassName_FK)
        Me.relationClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK = New Global.System.Data.DataRelation("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tableclassdisciplinerel.CompetitionDisciplineCollectionPKeyColumn}, false)
        Me.Relations.Add(Me.relationClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK)
        Me.relationClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK = New Global.System.Data.DataRelation("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tableclassdisciplinerel.TraditionalDisciplineCollectionPKeyColumn}, false)
        Me.Relations.Add(Me.relationClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK)
        Me.relationCompetition_StudentPKey_FK = New Global.System.Data.DataRelation("Competition_StudentPKey_FK", New Global.System.Data.DataColumn() {Me.tablestudent.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetition.StudentPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetition_StudentPKey_FK)
        Me.relationCompetitionDisciplineCollection_FemaleJumpPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_FemaleJumpPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.FemaleJumpPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_FemaleJumpPKey_FK)
        Me.relationCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.FemaleMiddleDistancePKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK)
        Me.relationCompetitionDisciplineCollection_FemaleSprintPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_FemaleSprintPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.FemaleSprintPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_FemaleSprintPKey_FK)
        Me.relationCompetitionDisciplineCollection_FemaleThrowPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_FemaleThrowPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.FemaleThrowPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_FemaleThrowPKey_FK)
        Me.relationCompetitionDisciplineCollection_MaleJumpPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_MaleJumpPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.MaleJumpPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_MaleJumpPKey_FK)
        Me.relationCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.MaleMiddleDistancePKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK)
        Me.relationCompetitionDisciplineCollection_MaleSprintPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_MaleSprintPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.MaleSprintPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_MaleSprintPKey_FK)
        Me.relationCompetitionDisciplineCollection_MaleThrowPKey_FK = New Global.System.Data.DataRelation("CompetitionDisciplineCollection_MaleThrowPKey_FK", New Global.System.Data.DataColumn() {Me.tablecompetitiondiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablecompetitiondisciplinecollection.MaleThrowPKeyColumn}, false)
        Me.Relations.Add(Me.relationCompetitionDisciplineCollection_MaleThrowPKey_FK)
        Me.relationCourseClassRel_ClassName_FK = New Global.System.Data.DataRelation("CourseClassRel_ClassName_FK", New Global.System.Data.DataColumn() {Me.tableclass.NameColumn}, New Global.System.Data.DataColumn() {Me.tablecourseclassrel.ClassNameColumn}, false)
        Me.Relations.Add(Me.relationCourseClassRel_ClassName_FK)
        Me.relationStudentCourseRel_CoursePKey_FK = New Global.System.Data.DataRelation("StudentCourseRel_CoursePKey_FK", New Global.System.Data.DataColumn() {Me.tablecourseclassrel.CourseNameColumn}, New Global.System.Data.DataColumn() {Me.tablestudentcourserel.CourseNameColumn}, false)
        Me.Relations.Add(Me.relationStudentCourseRel_CoursePKey_FK)
        Me.relationStudentCourseRel_StudentPKey_FK = New Global.System.Data.DataRelation("StudentCourseRel_StudentPKey_FK", New Global.System.Data.DataColumn() {Me.tablestudent.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tablestudentcourserel.StudentPKeyColumn}, false)
        Me.Relations.Add(Me.relationStudentCourseRel_StudentPKey_FK)
        Me.relationTraditionalDisciplineCollection_FemaleJumpPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_FemaleJumpPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.FemaleJumpPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_FemaleJumpPKey_FK)
        Me.relationTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.FemaleMiddleDistancePKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK)
        Me.relationTraditionalDisciplineCollection_FemaleSprintPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_FemaleSprintPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.FemaleSprintPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_FemaleSprintPKey_FK)
        Me.relationTraditionalDisciplineCollection_FemaleThrowPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_FemaleThrowPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.FemaleThrowPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_FemaleThrowPKey_FK)
        Me.relationTraditionalDisciplineCollection_MaleJumpPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_MaleJumpPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.MaleJumpPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_MaleJumpPKey_FK)
        Me.relationTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.MaleMiddleDistancePKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK)
        Me.relationTraditionalDisciplineCollection_MaleSprintPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_MaleSprintPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.MaleSprintPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_MaleSprintPKey_FK)
        Me.relationTraditionalDisciplineCollection_MaleThrowPKey_FK = New Global.System.Data.DataRelation("TraditionalDisciplineCollection_MaleThrowPKey_FK", New Global.System.Data.DataColumn() {Me.tabletraditionaldiscipline.PKeyColumn}, New Global.System.Data.DataColumn() {Me.tabletraditionaldisciplinecollection.MaleThrowPKeyColumn}, false)
        Me.Relations.Add(Me.relationTraditionalDisciplineCollection_MaleThrowPKey_FK)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerialize_class() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetraditionalreportmeta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeclassdisciplinerel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecompetition() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecompetitiondiscipline() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecompetitiondisciplinecollection() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecompetitionreportmeta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializecourseclassrel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializestudent() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializestudentcourserel() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetraditionaldiscipline() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetraditionaldisciplinecollection() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeYearsWithStudentData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As HLDS = New HLDS()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub classRowChangeEventHandler(ByVal sender As Object, ByVal e As classRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub traditionalreportmetaRowChangeEventHandler(ByVal sender As Object, ByVal e As traditionalreportmetaRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub classdisciplinerelRowChangeEventHandler(ByVal sender As Object, ByVal e As classdisciplinerelRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub competitionRowChangeEventHandler(ByVal sender As Object, ByVal e As competitionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub competitiondisciplineRowChangeEventHandler(ByVal sender As Object, ByVal e As competitiondisciplineRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub competitiondisciplinecollectionRowChangeEventHandler(ByVal sender As Object, ByVal e As competitiondisciplinecollectionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub competitionreportmetaRowChangeEventHandler(ByVal sender As Object, ByVal e As competitionreportmetaRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub courseclassrelRowChangeEventHandler(ByVal sender As Object, ByVal e As courseclassrelRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub studentRowChangeEventHandler(ByVal sender As Object, ByVal e As studentRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub studentcourserelRowChangeEventHandler(ByVal sender As Object, ByVal e As studentcourserelRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub traditionaldisciplineRowChangeEventHandler(ByVal sender As Object, ByVal e As traditionaldisciplineRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub traditionaldisciplinecollectionRowChangeEventHandler(ByVal sender As Object, ByVal e As traditionaldisciplinecollectionRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub YearsWithStudentDataRowChangeEventHandler(ByVal sender As Object, ByVal e As YearsWithStudentDataRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class classDataTable
        Inherits Global.System.Data.TypedTableBase(Of classRow)
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Class"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As classRow
            Get
                Return CType(Me.Rows(index),classRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classRowChanging As classRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classRowChanged As classRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classRowDeleting As classRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classRowDeleted As classRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddclassRow(ByVal row As classRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddclassRow(ByVal Name As String) As classRow
            Dim rowclassRow As classRow = CType(Me.NewRow,classRow)
            Dim columnValuesArray() As Object = New Object() {Name}
            rowclassRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowclassRow)
            Return rowclassRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByName(ByVal Name As String) As classRow
            Return CType(Me.Rows.Find(New Object() {Name}),classRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As classDataTable = CType(MyBase.Clone,classDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New classDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnName}, true))
            Me.columnName.AllowDBNull = false
            Me.columnName.Unique = true
            Me.columnName.MaxLength = 1
            Me.ExtendedProperties.Add("Generator_RowClassName", "classRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "classRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "classRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "classDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "_class")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableclass")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Class")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewclassRow() As classRow
            Return CType(Me.NewRow,classRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New classRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(classRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.classRowChangedEvent) Is Nothing) Then
                RaiseEvent classRowChanged(Me, New classRowChangeEvent(CType(e.Row,classRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.classRowChangingEvent) Is Nothing) Then
                RaiseEvent classRowChanging(Me, New classRowChangeEvent(CType(e.Row,classRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.classRowDeletedEvent) Is Nothing) Then
                RaiseEvent classRowDeleted(Me, New classRowChangeEvent(CType(e.Row,classRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.classRowDeletingEvent) Is Nothing) Then
                RaiseEvent classRowDeleting(Me, New classRowChangeEvent(CType(e.Row,classRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveclassRow(ByVal row As classRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "classDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class traditionalreportmetaDataTable
        Inherits Global.System.Data.TypedTableBase(Of traditionalreportmetaRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnHonoraryCertificateScore As Global.System.Data.DataColumn
        
        Private columnVictoryCertificateScore As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TraditionalReportMeta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HonoraryCertificateScoreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHonoraryCertificateScore
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VictoryCertificateScoreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVictoryCertificateScore
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As traditionalreportmetaRow
            Get
                Return CType(Me.Rows(index),traditionalreportmetaRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionalreportmetaRowChanging As traditionalreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionalreportmetaRowChanged As traditionalreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionalreportmetaRowDeleting As traditionalreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionalreportmetaRowDeleted As traditionalreportmetaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtraditionalreportmetaRow(ByVal row As traditionalreportmetaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtraditionalreportmetaRow(ByVal PKey As System.Guid, ByVal Sex As String, ByVal Age As UInteger, ByVal HonoraryCertificateScore As Integer, ByVal VictoryCertificateScore As Integer) As traditionalreportmetaRow
            Dim rowtraditionalreportmetaRow As traditionalreportmetaRow = CType(Me.NewRow,traditionalreportmetaRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Sex, Age, HonoraryCertificateScore, VictoryCertificateScore}
            rowtraditionalreportmetaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtraditionalreportmetaRow)
            Return rowtraditionalreportmetaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As traditionalreportmetaRow
            Return CType(Me.Rows.Find(New Object() {PKey}),traditionalreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As traditionalreportmetaDataTable = CType(MyBase.Clone,traditionalreportmetaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New traditionalreportmetaDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnHonoraryCertificateScore = MyBase.Columns("HonoraryCertificateScore")
            Me.columnVictoryCertificateScore = MyBase.Columns("VictoryCertificateScore")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnHonoraryCertificateScore = New Global.System.Data.DataColumn("HonoraryCertificateScore", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHonoraryCertificateScore)
            Me.columnVictoryCertificateScore = New Global.System.Data.DataColumn("VictoryCertificateScore", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVictoryCertificateScore)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 6
            Me.columnAge.AllowDBNull = false
            Me.columnHonoraryCertificateScore.AllowDBNull = false
            Me.columnVictoryCertificateScore.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "traditionalreportmetaRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "traditionalreportmetaRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "traditionalreportmetaRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "traditionalreportmetaDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "traditionalreportmeta")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tabletraditionalreportmeta")
            Me.ExtendedProperties.Add("Generator_UserTableName", "TraditionalReportMeta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtraditionalreportmetaRow() As traditionalreportmetaRow
            Return CType(Me.NewRow,traditionalreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New traditionalreportmetaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(traditionalreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.traditionalreportmetaRowChangedEvent) Is Nothing) Then
                RaiseEvent traditionalreportmetaRowChanged(Me, New traditionalreportmetaRowChangeEvent(CType(e.Row,traditionalreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.traditionalreportmetaRowChangingEvent) Is Nothing) Then
                RaiseEvent traditionalreportmetaRowChanging(Me, New traditionalreportmetaRowChangeEvent(CType(e.Row,traditionalreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.traditionalreportmetaRowDeletedEvent) Is Nothing) Then
                RaiseEvent traditionalreportmetaRowDeleted(Me, New traditionalreportmetaRowChangeEvent(CType(e.Row,traditionalreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.traditionalreportmetaRowDeletingEvent) Is Nothing) Then
                RaiseEvent traditionalreportmetaRowDeleting(Me, New traditionalreportmetaRowChangeEvent(CType(e.Row,traditionalreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetraditionalreportmetaRow(ByVal row As traditionalreportmetaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "traditionalreportmetaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class classdisciplinerelDataTable
        Inherits Global.System.Data.TypedTableBase(Of classdisciplinerelRow)
        
        Private columnClassName As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnCompetitionDisciplineCollectionPKey As Global.System.Data.DataColumn
        
        Private columnTraditionalDisciplineCollectionPKey As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClassDisciplineRel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClassNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CompetitionDisciplineCollectionPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompetitionDisciplineCollectionPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TraditionalDisciplineCollectionPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTraditionalDisciplineCollectionPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As classdisciplinerelRow
            Get
                Return CType(Me.Rows(index),classdisciplinerelRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classdisciplinerelRowChanging As classdisciplinerelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classdisciplinerelRowChanged As classdisciplinerelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classdisciplinerelRowDeleting As classdisciplinerelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event classdisciplinerelRowDeleted As classdisciplinerelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddclassdisciplinerelRow(ByVal row As classdisciplinerelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddclassdisciplinerelRow(ByVal parentclassRowByClassDisciplineRel_ClassName_FK As classRow, ByVal Year As Integer, ByVal parentcompetitiondisciplinecollectionRowByClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK As competitiondisciplinecollectionRow, ByVal parenttraditionaldisciplinecollectionRowByClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK As traditionaldisciplinecollectionRow) As classdisciplinerelRow
            Dim rowclassdisciplinerelRow As classdisciplinerelRow = CType(Me.NewRow,classdisciplinerelRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Year, Nothing, Nothing}
            If (Not (parentclassRowByClassDisciplineRel_ClassName_FK) Is Nothing) Then
                columnValuesArray(0) = parentclassRowByClassDisciplineRel_ClassName_FK(0)
            End If
            If (Not (parentcompetitiondisciplinecollectionRowByClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK) Is Nothing) Then
                columnValuesArray(2) = parentcompetitiondisciplinecollectionRowByClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplinecollectionRowByClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK) Is Nothing) Then
                columnValuesArray(3) = parenttraditionaldisciplinecollectionRowByClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK(0)
            End If
            rowclassdisciplinerelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowclassdisciplinerelRow)
            Return rowclassdisciplinerelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByClassNameYear(ByVal ClassName As String, ByVal Year As Integer) As classdisciplinerelRow
            Return CType(Me.Rows.Find(New Object() {ClassName, Year}),classdisciplinerelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As classdisciplinerelDataTable = CType(MyBase.Clone,classdisciplinerelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New classdisciplinerelDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnClassName = MyBase.Columns("ClassName")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnCompetitionDisciplineCollectionPKey = MyBase.Columns("CompetitionDisciplineCollectionPKey")
            Me.columnTraditionalDisciplineCollectionPKey = MyBase.Columns("TraditionalDisciplineCollectionPKey")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnClassName = New Global.System.Data.DataColumn("ClassName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassName)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnCompetitionDisciplineCollectionPKey = New Global.System.Data.DataColumn("CompetitionDisciplineCollectionPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompetitionDisciplineCollectionPKey)
            Me.columnTraditionalDisciplineCollectionPKey = New Global.System.Data.DataColumn("TraditionalDisciplineCollectionPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTraditionalDisciplineCollectionPKey)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClassName, Me.columnYear}, true))
            Me.columnClassName.AllowDBNull = false
            Me.columnClassName.MaxLength = 1
            Me.columnYear.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "classdisciplinerelRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "classdisciplinerelRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "classdisciplinerelRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "classdisciplinerelDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "classdisciplinerel")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tableclassdisciplinerel")
            Me.ExtendedProperties.Add("Generator_UserTableName", "ClassDisciplineRel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewclassdisciplinerelRow() As classdisciplinerelRow
            Return CType(Me.NewRow,classdisciplinerelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New classdisciplinerelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(classdisciplinerelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.classdisciplinerelRowChangedEvent) Is Nothing) Then
                RaiseEvent classdisciplinerelRowChanged(Me, New classdisciplinerelRowChangeEvent(CType(e.Row,classdisciplinerelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.classdisciplinerelRowChangingEvent) Is Nothing) Then
                RaiseEvent classdisciplinerelRowChanging(Me, New classdisciplinerelRowChangeEvent(CType(e.Row,classdisciplinerelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.classdisciplinerelRowDeletedEvent) Is Nothing) Then
                RaiseEvent classdisciplinerelRowDeleted(Me, New classdisciplinerelRowChangeEvent(CType(e.Row,classdisciplinerelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.classdisciplinerelRowDeletingEvent) Is Nothing) Then
                RaiseEvent classdisciplinerelRowDeleting(Me, New classdisciplinerelRowChangeEvent(CType(e.Row,classdisciplinerelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveclassdisciplinerelRow(ByVal row As classdisciplinerelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "classdisciplinerelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class competitionDataTable
        Inherits Global.System.Data.TypedTableBase(Of competitionRow)
        
        Private columnStudentPKey As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnSprint As Global.System.Data.DataColumn
        
        Private columnJump As Global.System.Data.DataColumn
        
        Private columnThrow As Global.System.Data.DataColumn
        
        Private columnMiddleDistance As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Competition"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StudentPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SprintColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSprint
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property JumpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJump
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ThrowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnThrow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MiddleDistanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMiddleDistance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As competitionRow
            Get
                Return CType(Me.Rows(index),competitionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionRowChanging As competitionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionRowChanged As competitionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionRowDeleting As competitionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionRowDeleted As competitionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcompetitionRow(ByVal row As competitionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcompetitionRow(ByVal parentstudentRowByCompetition_StudentPKey_FK As studentRow, ByVal Year As Integer, ByVal Sprint As Single, ByVal Jump As Single, ByVal _Throw As Single, ByVal MiddleDistance As Single) As competitionRow
            Dim rowcompetitionRow As competitionRow = CType(Me.NewRow,competitionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Year, Sprint, Jump, _Throw, MiddleDistance}
            If (Not (parentstudentRowByCompetition_StudentPKey_FK) Is Nothing) Then
                columnValuesArray(0) = parentstudentRowByCompetition_StudentPKey_FK(0)
            End If
            rowcompetitionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompetitionRow)
            Return rowcompetitionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByStudentPKeyYear(ByVal StudentPKey As System.Guid, ByVal Year As Integer) As competitionRow
            Return CType(Me.Rows.Find(New Object() {StudentPKey, Year}),competitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As competitionDataTable = CType(MyBase.Clone,competitionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New competitionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnStudentPKey = MyBase.Columns("StudentPKey")
            Me.columnYear = MyBase.Columns("Year")
            Me.columnSprint = MyBase.Columns("Sprint")
            Me.columnJump = MyBase.Columns("Jump")
            Me.columnThrow = MyBase.Columns("Throw")
            Me.columnMiddleDistance = MyBase.Columns("MiddleDistance")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnStudentPKey = New Global.System.Data.DataColumn("StudentPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPKey)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnSprint = New Global.System.Data.DataColumn("Sprint", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSprint)
            Me.columnJump = New Global.System.Data.DataColumn("Jump", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJump)
            Me.columnThrow = New Global.System.Data.DataColumn("Throw", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            Me.columnThrow.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "ThrowColumn")
            Me.columnThrow.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnThrow")
            Me.columnThrow.ExtendedProperties.Add("Generator_UserColumnName", "Throw")
            MyBase.Columns.Add(Me.columnThrow)
            Me.columnMiddleDistance = New Global.System.Data.DataColumn("MiddleDistance", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiddleDistance)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPKey, Me.columnYear}, true))
            Me.columnStudentPKey.AllowDBNull = false
            Me.columnYear.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "competitionRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "competitionRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "competitionRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "competitionDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "competition")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablecompetition")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Competition")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcompetitionRow() As competitionRow
            Return CType(Me.NewRow,competitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New competitionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(competitionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.competitionRowChangedEvent) Is Nothing) Then
                RaiseEvent competitionRowChanged(Me, New competitionRowChangeEvent(CType(e.Row,competitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.competitionRowChangingEvent) Is Nothing) Then
                RaiseEvent competitionRowChanging(Me, New competitionRowChangeEvent(CType(e.Row,competitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.competitionRowDeletedEvent) Is Nothing) Then
                RaiseEvent competitionRowDeleted(Me, New competitionRowChangeEvent(CType(e.Row,competitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.competitionRowDeletingEvent) Is Nothing) Then
                RaiseEvent competitionRowDeleting(Me, New competitionRowChangeEvent(CType(e.Row,competitionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecompetitionRow(ByVal row As competitionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "competitionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class competitiondisciplineDataTable
        Inherits Global.System.Data.TypedTableBase(Of competitiondisciplineRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnUnit As Global.System.Data.DataColumn
        
        Private columnLowIsBetter As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompetitionDiscipline"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UnitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LowIsBetterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLowIsBetter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As competitiondisciplineRow
            Get
                Return CType(Me.Rows(index),competitiondisciplineRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplineRowChanging As competitiondisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplineRowChanged As competitiondisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplineRowDeleting As competitiondisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplineRowDeleted As competitiondisciplineRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcompetitiondisciplineRow(ByVal row As competitiondisciplineRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcompetitiondisciplineRow(ByVal PKey As System.Guid, ByVal Type As String, ByVal Name As String, ByVal Unit As String, ByVal LowIsBetter As Boolean) As competitiondisciplineRow
            Dim rowcompetitiondisciplineRow As competitiondisciplineRow = CType(Me.NewRow,competitiondisciplineRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Type, Name, Unit, LowIsBetter}
            rowcompetitiondisciplineRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompetitiondisciplineRow)
            Return rowcompetitiondisciplineRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As competitiondisciplineRow
            Return CType(Me.Rows.Find(New Object() {PKey}),competitiondisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As competitiondisciplineDataTable = CType(MyBase.Clone,competitiondisciplineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New competitiondisciplineDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnType = MyBase.Columns("Type")
            Me.columnName = MyBase.Columns("Name")
            Me.columnUnit = MyBase.Columns("Unit")
            Me.columnLowIsBetter = MyBase.Columns("LowIsBetter")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnUnit = New Global.System.Data.DataColumn("Unit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit)
            Me.columnLowIsBetter = New Global.System.Data.DataColumn("LowIsBetter", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLowIsBetter)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 14
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 45
            Me.columnUnit.AllowDBNull = false
            Me.columnUnit.MaxLength = 25
            Me.columnLowIsBetter.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "competitiondisciplineRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "competitiondisciplineRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "competitiondisciplineRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "competitiondisciplineDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "competitiondiscipline")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablecompetitiondiscipline")
            Me.ExtendedProperties.Add("Generator_UserTableName", "CompetitionDiscipline")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcompetitiondisciplineRow() As competitiondisciplineRow
            Return CType(Me.NewRow,competitiondisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New competitiondisciplineRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(competitiondisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.competitiondisciplineRowChangedEvent) Is Nothing) Then
                RaiseEvent competitiondisciplineRowChanged(Me, New competitiondisciplineRowChangeEvent(CType(e.Row,competitiondisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.competitiondisciplineRowChangingEvent) Is Nothing) Then
                RaiseEvent competitiondisciplineRowChanging(Me, New competitiondisciplineRowChangeEvent(CType(e.Row,competitiondisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.competitiondisciplineRowDeletedEvent) Is Nothing) Then
                RaiseEvent competitiondisciplineRowDeleted(Me, New competitiondisciplineRowChangeEvent(CType(e.Row,competitiondisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.competitiondisciplineRowDeletingEvent) Is Nothing) Then
                RaiseEvent competitiondisciplineRowDeleting(Me, New competitiondisciplineRowChangeEvent(CType(e.Row,competitiondisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecompetitiondisciplineRow(ByVal row As competitiondisciplineRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "competitiondisciplineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class competitiondisciplinecollectionDataTable
        Inherits Global.System.Data.TypedTableBase(Of competitiondisciplinecollectionRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnMaleSprintPKey As Global.System.Data.DataColumn
        
        Private columnMaleJumpPKey As Global.System.Data.DataColumn
        
        Private columnMaleThrowPKey As Global.System.Data.DataColumn
        
        Private columnMaleMiddleDistancePKey As Global.System.Data.DataColumn
        
        Private columnFemaleSprintPKey As Global.System.Data.DataColumn
        
        Private columnFemaleJumpPKey As Global.System.Data.DataColumn
        
        Private columnFemaleThrowPKey As Global.System.Data.DataColumn
        
        Private columnFemaleMiddleDistancePKey As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompetitionDisciplineCollection"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleSprintPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleSprintPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleJumpPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleJumpPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleThrowPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleThrowPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleMiddleDistancePKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleMiddleDistancePKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleSprintPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleSprintPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleJumpPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleJumpPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleThrowPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleThrowPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleMiddleDistancePKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleMiddleDistancePKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As competitiondisciplinecollectionRow
            Get
                Return CType(Me.Rows(index),competitiondisciplinecollectionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplinecollectionRowChanging As competitiondisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplinecollectionRowChanged As competitiondisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplinecollectionRowDeleting As competitiondisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitiondisciplinecollectionRowDeleted As competitiondisciplinecollectionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcompetitiondisciplinecollectionRow(ByVal row As competitiondisciplinecollectionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcompetitiondisciplinecollectionRow(ByVal PKey As System.Guid, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleSprintPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleJumpPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleThrowPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleSprintPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleJumpPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleThrowPKey_FK As competitiondisciplineRow, ByVal parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK As competitiondisciplineRow) As competitiondisciplinecollectionRow
            Dim rowcompetitiondisciplinecollectionRow As competitiondisciplinecollectionRow = CType(Me.NewRow,competitiondisciplinecollectionRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleSprintPKey_FK) Is Nothing) Then
                columnValuesArray(1) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleSprintPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleJumpPKey_FK) Is Nothing) Then
                columnValuesArray(2) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleJumpPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleThrowPKey_FK) Is Nothing) Then
                columnValuesArray(3) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleThrowPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK) Is Nothing) Then
                columnValuesArray(4) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleSprintPKey_FK) Is Nothing) Then
                columnValuesArray(5) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleSprintPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleJumpPKey_FK) Is Nothing) Then
                columnValuesArray(6) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleJumpPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleThrowPKey_FK) Is Nothing) Then
                columnValuesArray(7) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleThrowPKey_FK(0)
            End If
            If (Not (parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK) Is Nothing) Then
                columnValuesArray(8) = parentcompetitiondisciplineRowByCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK(0)
            End If
            rowcompetitiondisciplinecollectionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompetitiondisciplinecollectionRow)
            Return rowcompetitiondisciplinecollectionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As competitiondisciplinecollectionRow
            Return CType(Me.Rows.Find(New Object() {PKey}),competitiondisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As competitiondisciplinecollectionDataTable = CType(MyBase.Clone,competitiondisciplinecollectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New competitiondisciplinecollectionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnMaleSprintPKey = MyBase.Columns("MaleSprintPKey")
            Me.columnMaleJumpPKey = MyBase.Columns("MaleJumpPKey")
            Me.columnMaleThrowPKey = MyBase.Columns("MaleThrowPKey")
            Me.columnMaleMiddleDistancePKey = MyBase.Columns("MaleMiddleDistancePKey")
            Me.columnFemaleSprintPKey = MyBase.Columns("FemaleSprintPKey")
            Me.columnFemaleJumpPKey = MyBase.Columns("FemaleJumpPKey")
            Me.columnFemaleThrowPKey = MyBase.Columns("FemaleThrowPKey")
            Me.columnFemaleMiddleDistancePKey = MyBase.Columns("FemaleMiddleDistancePKey")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnMaleSprintPKey = New Global.System.Data.DataColumn("MaleSprintPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleSprintPKey)
            Me.columnMaleJumpPKey = New Global.System.Data.DataColumn("MaleJumpPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleJumpPKey)
            Me.columnMaleThrowPKey = New Global.System.Data.DataColumn("MaleThrowPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleThrowPKey)
            Me.columnMaleMiddleDistancePKey = New Global.System.Data.DataColumn("MaleMiddleDistancePKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleMiddleDistancePKey)
            Me.columnFemaleSprintPKey = New Global.System.Data.DataColumn("FemaleSprintPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleSprintPKey)
            Me.columnFemaleJumpPKey = New Global.System.Data.DataColumn("FemaleJumpPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleJumpPKey)
            Me.columnFemaleThrowPKey = New Global.System.Data.DataColumn("FemaleThrowPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleThrowPKey)
            Me.columnFemaleMiddleDistancePKey = New Global.System.Data.DataColumn("FemaleMiddleDistancePKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleMiddleDistancePKey)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnMaleSprintPKey.AllowDBNull = false
            Me.columnMaleJumpPKey.AllowDBNull = false
            Me.columnMaleThrowPKey.AllowDBNull = false
            Me.columnMaleMiddleDistancePKey.AllowDBNull = false
            Me.columnFemaleSprintPKey.AllowDBNull = false
            Me.columnFemaleJumpPKey.AllowDBNull = false
            Me.columnFemaleThrowPKey.AllowDBNull = false
            Me.columnFemaleMiddleDistancePKey.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "competitiondisciplinecollectionRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "competitiondisciplinecollectionRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "competitiondisciplinecollectionRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "competitiondisciplinecollectionDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "competitiondisciplinecollection")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablecompetitiondisciplinecollection")
            Me.ExtendedProperties.Add("Generator_UserTableName", "CompetitionDisciplineCollection")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcompetitiondisciplinecollectionRow() As competitiondisciplinecollectionRow
            Return CType(Me.NewRow,competitiondisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New competitiondisciplinecollectionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(competitiondisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.competitiondisciplinecollectionRowChangedEvent) Is Nothing) Then
                RaiseEvent competitiondisciplinecollectionRowChanged(Me, New competitiondisciplinecollectionRowChangeEvent(CType(e.Row,competitiondisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.competitiondisciplinecollectionRowChangingEvent) Is Nothing) Then
                RaiseEvent competitiondisciplinecollectionRowChanging(Me, New competitiondisciplinecollectionRowChangeEvent(CType(e.Row,competitiondisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.competitiondisciplinecollectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent competitiondisciplinecollectionRowDeleted(Me, New competitiondisciplinecollectionRowChangeEvent(CType(e.Row,competitiondisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.competitiondisciplinecollectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent competitiondisciplinecollectionRowDeleting(Me, New competitiondisciplinecollectionRowChangeEvent(CType(e.Row,competitiondisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecompetitiondisciplinecollectionRow(ByVal row As competitiondisciplinecollectionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "competitiondisciplinecollectionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class competitionreportmetaDataTable
        Inherits Global.System.Data.TypedTableBase(Of competitionreportmetaRow)
        
        Private columnYear As Global.System.Data.DataColumn
        
        Private columnHonoraryCertificatePercentage As Global.System.Data.DataColumn
        
        Private columnVictoryCertificatePercentage As Global.System.Data.DataColumn
        
        Private columnGrade1Percentage As Global.System.Data.DataColumn
        
        Private columnGrade2Percentage As Global.System.Data.DataColumn
        
        Private columnGrade3Percentage As Global.System.Data.DataColumn
        
        Private columnGrade4Percentage As Global.System.Data.DataColumn
        
        Private columnGrade5Percentage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CompetitionReportMeta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HonoraryCertificatePercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHonoraryCertificatePercentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property VictoryCertificatePercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVictoryCertificatePercentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Grade1PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade1Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Grade2PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade2Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Grade3PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade3Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Grade4PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade4Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Grade5PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGrade5Percentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As competitionreportmetaRow
            Get
                Return CType(Me.Rows(index),competitionreportmetaRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionreportmetaRowChanging As competitionreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionreportmetaRowChanged As competitionreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionreportmetaRowDeleting As competitionreportmetaRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event competitionreportmetaRowDeleted As competitionreportmetaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcompetitionreportmetaRow(ByVal row As competitionreportmetaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcompetitionreportmetaRow(ByVal Year As Integer, ByVal HonoraryCertificatePercentage As Integer, ByVal VictoryCertificatePercentage As Integer, ByVal Grade1Percentage As Integer, ByVal Grade2Percentage As Integer, ByVal Grade3Percentage As Integer, ByVal Grade4Percentage As Integer, ByVal Grade5Percentage As Integer) As competitionreportmetaRow
            Dim rowcompetitionreportmetaRow As competitionreportmetaRow = CType(Me.NewRow,competitionreportmetaRow)
            Dim columnValuesArray() As Object = New Object() {Year, HonoraryCertificatePercentage, VictoryCertificatePercentage, Grade1Percentage, Grade2Percentage, Grade3Percentage, Grade4Percentage, Grade5Percentage}
            rowcompetitionreportmetaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcompetitionreportmetaRow)
            Return rowcompetitionreportmetaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByYear(ByVal Year As Integer) As competitionreportmetaRow
            Return CType(Me.Rows.Find(New Object() {Year}),competitionreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As competitionreportmetaDataTable = CType(MyBase.Clone,competitionreportmetaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New competitionreportmetaDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnYear = MyBase.Columns("Year")
            Me.columnHonoraryCertificatePercentage = MyBase.Columns("HonoraryCertificatePercentage")
            Me.columnVictoryCertificatePercentage = MyBase.Columns("VictoryCertificatePercentage")
            Me.columnGrade1Percentage = MyBase.Columns("Grade1Percentage")
            Me.columnGrade2Percentage = MyBase.Columns("Grade2Percentage")
            Me.columnGrade3Percentage = MyBase.Columns("Grade3Percentage")
            Me.columnGrade4Percentage = MyBase.Columns("Grade4Percentage")
            Me.columnGrade5Percentage = MyBase.Columns("Grade5Percentage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnHonoraryCertificatePercentage = New Global.System.Data.DataColumn("HonoraryCertificatePercentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHonoraryCertificatePercentage)
            Me.columnVictoryCertificatePercentage = New Global.System.Data.DataColumn("VictoryCertificatePercentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVictoryCertificatePercentage)
            Me.columnGrade1Percentage = New Global.System.Data.DataColumn("Grade1Percentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade1Percentage)
            Me.columnGrade2Percentage = New Global.System.Data.DataColumn("Grade2Percentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade2Percentage)
            Me.columnGrade3Percentage = New Global.System.Data.DataColumn("Grade3Percentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade3Percentage)
            Me.columnGrade4Percentage = New Global.System.Data.DataColumn("Grade4Percentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade4Percentage)
            Me.columnGrade5Percentage = New Global.System.Data.DataColumn("Grade5Percentage", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGrade5Percentage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnYear}, true))
            Me.columnYear.AllowDBNull = false
            Me.columnYear.Unique = true
            Me.columnHonoraryCertificatePercentage.AllowDBNull = false
            Me.columnVictoryCertificatePercentage.AllowDBNull = false
            Me.columnGrade1Percentage.AllowDBNull = false
            Me.columnGrade2Percentage.AllowDBNull = false
            Me.columnGrade3Percentage.AllowDBNull = false
            Me.columnGrade4Percentage.AllowDBNull = false
            Me.columnGrade5Percentage.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "competitionreportmetaRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "competitionreportmetaRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "competitionreportmetaRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "competitionreportmetaDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "competitionreportmeta")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablecompetitionreportmeta")
            Me.ExtendedProperties.Add("Generator_UserTableName", "CompetitionReportMeta")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcompetitionreportmetaRow() As competitionreportmetaRow
            Return CType(Me.NewRow,competitionreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New competitionreportmetaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(competitionreportmetaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.competitionreportmetaRowChangedEvent) Is Nothing) Then
                RaiseEvent competitionreportmetaRowChanged(Me, New competitionreportmetaRowChangeEvent(CType(e.Row,competitionreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.competitionreportmetaRowChangingEvent) Is Nothing) Then
                RaiseEvent competitionreportmetaRowChanging(Me, New competitionreportmetaRowChangeEvent(CType(e.Row,competitionreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.competitionreportmetaRowDeletedEvent) Is Nothing) Then
                RaiseEvent competitionreportmetaRowDeleted(Me, New competitionreportmetaRowChangeEvent(CType(e.Row,competitionreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.competitionreportmetaRowDeletingEvent) Is Nothing) Then
                RaiseEvent competitionreportmetaRowDeleting(Me, New competitionreportmetaRowChangeEvent(CType(e.Row,competitionreportmetaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecompetitionreportmetaRow(ByVal row As competitionreportmetaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "competitionreportmetaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class courseclassrelDataTable
        Inherits Global.System.Data.TypedTableBase(Of courseclassrelRow)
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnClassName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CourseClassRel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ClassNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClassName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As courseclassrelRow
            Get
                Return CType(Me.Rows(index),courseclassrelRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event courseclassrelRowChanging As courseclassrelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event courseclassrelRowChanged As courseclassrelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event courseclassrelRowDeleting As courseclassrelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event courseclassrelRowDeleted As courseclassrelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddcourseclassrelRow(ByVal row As courseclassrelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddcourseclassrelRow(ByVal CourseName As String, ByVal parentclassRowByCourseClassRel_ClassName_FK As classRow) As courseclassrelRow
            Dim rowcourseclassrelRow As courseclassrelRow = CType(Me.NewRow,courseclassrelRow)
            Dim columnValuesArray() As Object = New Object() {CourseName, Nothing}
            If (Not (parentclassRowByCourseClassRel_ClassName_FK) Is Nothing) Then
                columnValuesArray(1) = parentclassRowByCourseClassRel_ClassName_FK(0)
            End If
            rowcourseclassrelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowcourseclassrelRow)
            Return rowcourseclassrelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByCourseName(ByVal CourseName As String) As courseclassrelRow
            Return CType(Me.Rows.Find(New Object() {CourseName}),courseclassrelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As courseclassrelDataTable = CType(MyBase.Clone,courseclassrelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New courseclassrelDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnClassName = MyBase.Columns("ClassName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnClassName = New Global.System.Data.DataColumn("ClassName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClassName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCourseName}, true))
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.Unique = true
            Me.columnCourseName.MaxLength = 3
            Me.columnClassName.AllowDBNull = false
            Me.columnClassName.MaxLength = 1
            Me.ExtendedProperties.Add("Generator_RowClassName", "courseclassrelRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "courseclassrelRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "courseclassrelRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "courseclassrelDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "courseclassrel")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablecourseclassrel")
            Me.ExtendedProperties.Add("Generator_UserTableName", "CourseClassRel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewcourseclassrelRow() As courseclassrelRow
            Return CType(Me.NewRow,courseclassrelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New courseclassrelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(courseclassrelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.courseclassrelRowChangedEvent) Is Nothing) Then
                RaiseEvent courseclassrelRowChanged(Me, New courseclassrelRowChangeEvent(CType(e.Row,courseclassrelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.courseclassrelRowChangingEvent) Is Nothing) Then
                RaiseEvent courseclassrelRowChanging(Me, New courseclassrelRowChangeEvent(CType(e.Row,courseclassrelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.courseclassrelRowDeletedEvent) Is Nothing) Then
                RaiseEvent courseclassrelRowDeleted(Me, New courseclassrelRowChangeEvent(CType(e.Row,courseclassrelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.courseclassrelRowDeletingEvent) Is Nothing) Then
                RaiseEvent courseclassrelRowDeleting(Me, New courseclassrelRowChangeEvent(CType(e.Row,courseclassrelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovecourseclassrelRow(ByVal row As courseclassrelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "courseclassrelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studentDataTable
        Inherits Global.System.Data.TypedTableBase(Of studentRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnSurname As Global.System.Data.DataColumn
        
        Private columnForename As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnYearOfBirth As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Student"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SurnameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ForenameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForename
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearOfBirthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYearOfBirth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studentRow
            Get
                Return CType(Me.Rows(index),studentRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowChanging As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowChanged As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowDeleting As studentRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentRowDeleted As studentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddstudentRow(ByVal row As studentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddstudentRow(ByVal PKey As System.Guid, ByVal Surname As String, ByVal Forename As String, ByVal Sex As String, ByVal YearOfBirth As Integer) As studentRow
            Dim rowstudentRow As studentRow = CType(Me.NewRow,studentRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Surname, Forename, Sex, YearOfBirth}
            rowstudentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudentRow)
            Return rowstudentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As studentRow
            Return CType(Me.Rows.Find(New Object() {PKey}),studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studentDataTable = CType(MyBase.Clone,studentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studentDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnSurname = MyBase.Columns("Surname")
            Me.columnForename = MyBase.Columns("Forename")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnYearOfBirth = MyBase.Columns("YearOfBirth")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnSurname = New Global.System.Data.DataColumn("Surname", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurname)
            Me.columnForename = New Global.System.Data.DataColumn("Forename", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForename)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnYearOfBirth = New Global.System.Data.DataColumn("YearOfBirth", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYearOfBirth)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnSurname.AllowDBNull = false
            Me.columnSurname.MaxLength = 45
            Me.columnForename.AllowDBNull = false
            Me.columnForename.MaxLength = 45
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 6
            Me.columnYearOfBirth.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "studentRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "studentRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "studentRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "studentDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "student")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablestudent")
            Me.ExtendedProperties.Add("Generator_UserTableName", "Student")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewstudentRow() As studentRow
            Return CType(Me.NewRow,studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studentRowChangedEvent) Is Nothing) Then
                RaiseEvent studentRowChanged(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studentRowChangingEvent) Is Nothing) Then
                RaiseEvent studentRowChanging(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studentRowDeletedEvent) Is Nothing) Then
                RaiseEvent studentRowDeleted(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studentRowDeletingEvent) Is Nothing) Then
                RaiseEvent studentRowDeleting(Me, New studentRowChangeEvent(CType(e.Row,studentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovestudentRow(ByVal row As studentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class studentcourserelDataTable
        Inherits Global.System.Data.TypedTableBase(Of studentcourserelRow)
        
        Private columnStudentPKey As Global.System.Data.DataColumn
        
        Private columnCourseName As Global.System.Data.DataColumn
        
        Private columnYear As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "StudentCourseRel"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StudentPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CourseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCourseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As studentcourserelRow
            Get
                Return CType(Me.Rows(index),studentcourserelRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentcourserelRowChanging As studentcourserelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentcourserelRowChanged As studentcourserelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentcourserelRowDeleting As studentcourserelRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event studentcourserelRowDeleted As studentcourserelRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddstudentcourserelRow(ByVal row As studentcourserelRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddstudentcourserelRow(ByVal parentstudentRowByStudentCourseRel_StudentPKey_FK As studentRow, ByVal parentcourseclassrelRowByStudentCourseRel_CoursePKey_FK As courseclassrelRow, ByVal Year As Integer) As studentcourserelRow
            Dim rowstudentcourserelRow As studentcourserelRow = CType(Me.NewRow,studentcourserelRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Nothing, Year}
            If (Not (parentstudentRowByStudentCourseRel_StudentPKey_FK) Is Nothing) Then
                columnValuesArray(0) = parentstudentRowByStudentCourseRel_StudentPKey_FK(0)
            End If
            If (Not (parentcourseclassrelRowByStudentCourseRel_CoursePKey_FK) Is Nothing) Then
                columnValuesArray(1) = parentcourseclassrelRowByStudentCourseRel_CoursePKey_FK(0)
            End If
            rowstudentcourserelRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowstudentcourserelRow)
            Return rowstudentcourserelRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByStudentPKeyYear(ByVal StudentPKey As System.Guid, ByVal Year As Integer) As studentcourserelRow
            Return CType(Me.Rows.Find(New Object() {StudentPKey, Year}),studentcourserelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As studentcourserelDataTable = CType(MyBase.Clone,studentcourserelDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New studentcourserelDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnStudentPKey = MyBase.Columns("StudentPKey")
            Me.columnCourseName = MyBase.Columns("CourseName")
            Me.columnYear = MyBase.Columns("Year")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnStudentPKey = New Global.System.Data.DataColumn("StudentPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentPKey)
            Me.columnCourseName = New Global.System.Data.DataColumn("CourseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCourseName)
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnStudentPKey, Me.columnYear}, true))
            Me.columnStudentPKey.AllowDBNull = false
            Me.columnCourseName.AllowDBNull = false
            Me.columnCourseName.MaxLength = 3
            Me.columnYear.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "studentcourserelRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "studentcourserelRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "studentcourserelRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "studentcourserelDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "studentcourserel")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tablestudentcourserel")
            Me.ExtendedProperties.Add("Generator_UserTableName", "StudentCourseRel")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewstudentcourserelRow() As studentcourserelRow
            Return CType(Me.NewRow,studentcourserelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New studentcourserelRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(studentcourserelRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.studentcourserelRowChangedEvent) Is Nothing) Then
                RaiseEvent studentcourserelRowChanged(Me, New studentcourserelRowChangeEvent(CType(e.Row,studentcourserelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.studentcourserelRowChangingEvent) Is Nothing) Then
                RaiseEvent studentcourserelRowChanging(Me, New studentcourserelRowChangeEvent(CType(e.Row,studentcourserelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.studentcourserelRowDeletedEvent) Is Nothing) Then
                RaiseEvent studentcourserelRowDeleted(Me, New studentcourserelRowChangeEvent(CType(e.Row,studentcourserelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.studentcourserelRowDeletingEvent) Is Nothing) Then
                RaiseEvent studentcourserelRowDeleting(Me, New studentcourserelRowChangeEvent(CType(e.Row,studentcourserelRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovestudentcourserelRow(ByVal row As studentcourserelRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "studentcourserelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class traditionaldisciplineDataTable
        Inherits Global.System.Data.TypedTableBase(Of traditionaldisciplineRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnUnitSymbol As Global.System.Data.DataColumn
        
        Private columnDistance As Global.System.Data.DataColumn
        
        Private columnOverhead As Global.System.Data.DataColumn
        
        Private columnConstantA As Global.System.Data.DataColumn
        
        Private columnConstantC As Global.System.Data.DataColumn
        
        Private columnMeasurement As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TraditionalDiscipline"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UnitSymbolColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnitSymbol
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DistanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDistance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OverheadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOverhead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ConstantAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConstantA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ConstantCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConstantC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MeasurementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMeasurement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As traditionaldisciplineRow
            Get
                Return CType(Me.Rows(index),traditionaldisciplineRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplineRowChanging As traditionaldisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplineRowChanged As traditionaldisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplineRowDeleting As traditionaldisciplineRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplineRowDeleted As traditionaldisciplineRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtraditionaldisciplineRow(ByVal row As traditionaldisciplineRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtraditionaldisciplineRow(ByVal PKey As System.Guid, ByVal Type As String, ByVal Sex As String, ByVal Name As String, ByVal UnitSymbol As String, ByVal Distance As Integer, ByVal Overhead As Single, ByVal ConstantA As Single, ByVal ConstantC As Single, ByVal Measurement As String) As traditionaldisciplineRow
            Dim rowtraditionaldisciplineRow As traditionaldisciplineRow = CType(Me.NewRow,traditionaldisciplineRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Type, Sex, Name, UnitSymbol, Distance, Overhead, ConstantA, ConstantC, Measurement}
            rowtraditionaldisciplineRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtraditionaldisciplineRow)
            Return rowtraditionaldisciplineRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As traditionaldisciplineRow
            Return CType(Me.Rows.Find(New Object() {PKey}),traditionaldisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As traditionaldisciplineDataTable = CType(MyBase.Clone,traditionaldisciplineDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New traditionaldisciplineDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnType = MyBase.Columns("Type")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnName = MyBase.Columns("Name")
            Me.columnUnitSymbol = MyBase.Columns("UnitSymbol")
            Me.columnDistance = MyBase.Columns("Distance")
            Me.columnOverhead = MyBase.Columns("Overhead")
            Me.columnConstantA = MyBase.Columns("ConstantA")
            Me.columnConstantC = MyBase.Columns("ConstantC")
            Me.columnMeasurement = MyBase.Columns("Measurement")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnUnitSymbol = New Global.System.Data.DataColumn("UnitSymbol", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnitSymbol)
            Me.columnDistance = New Global.System.Data.DataColumn("Distance", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDistance)
            Me.columnOverhead = New Global.System.Data.DataColumn("Overhead", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOverhead)
            Me.columnConstantA = New Global.System.Data.DataColumn("ConstantA", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConstantA)
            Me.columnConstantC = New Global.System.Data.DataColumn("ConstantC", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConstantC)
            Me.columnMeasurement = New Global.System.Data.DataColumn("Measurement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMeasurement)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnType.AllowDBNull = false
            Me.columnType.MaxLength = 14
            Me.columnSex.AllowDBNull = false
            Me.columnSex.MaxLength = 6
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 45
            Me.columnUnitSymbol.AllowDBNull = false
            Me.columnUnitSymbol.MaxLength = 1
            Me.columnConstantA.AllowDBNull = false
            Me.columnConstantC.AllowDBNull = false
            Me.columnMeasurement.MaxLength = 10
            Me.ExtendedProperties.Add("Generator_RowClassName", "traditionaldisciplineRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "traditionaldisciplineRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "traditionaldisciplineRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "traditionaldisciplineDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "traditionaldiscipline")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tabletraditionaldiscipline")
            Me.ExtendedProperties.Add("Generator_UserTableName", "TraditionalDiscipline")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtraditionaldisciplineRow() As traditionaldisciplineRow
            Return CType(Me.NewRow,traditionaldisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New traditionaldisciplineRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(traditionaldisciplineRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.traditionaldisciplineRowChangedEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplineRowChanged(Me, New traditionaldisciplineRowChangeEvent(CType(e.Row,traditionaldisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.traditionaldisciplineRowChangingEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplineRowChanging(Me, New traditionaldisciplineRowChangeEvent(CType(e.Row,traditionaldisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.traditionaldisciplineRowDeletedEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplineRowDeleted(Me, New traditionaldisciplineRowChangeEvent(CType(e.Row,traditionaldisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.traditionaldisciplineRowDeletingEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplineRowDeleting(Me, New traditionaldisciplineRowChangeEvent(CType(e.Row,traditionaldisciplineRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetraditionaldisciplineRow(ByVal row As traditionaldisciplineRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "traditionaldisciplineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class traditionaldisciplinecollectionDataTable
        Inherits Global.System.Data.TypedTableBase(Of traditionaldisciplinecollectionRow)
        
        Private columnPKey As Global.System.Data.DataColumn
        
        Private columnMaleSprintPKey As Global.System.Data.DataColumn
        
        Private columnMaleJumpPKey As Global.System.Data.DataColumn
        
        Private columnMaleThrowPKey As Global.System.Data.DataColumn
        
        Private columnMaleMiddleDistancePKey As Global.System.Data.DataColumn
        
        Private columnFemaleSprintPKey As Global.System.Data.DataColumn
        
        Private columnFemaleJumpPKey As Global.System.Data.DataColumn
        
        Private columnFemaleThrowPKey As Global.System.Data.DataColumn
        
        Private columnFemaleMiddleDistancePKey As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TraditionalDisciplineCollection"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleSprintPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleSprintPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleJumpPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleJumpPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleThrowPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleThrowPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MaleMiddleDistancePKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaleMiddleDistancePKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleSprintPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleSprintPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleJumpPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleJumpPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleThrowPKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleThrowPKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FemaleMiddleDistancePKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFemaleMiddleDistancePKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As traditionaldisciplinecollectionRow
            Get
                Return CType(Me.Rows(index),traditionaldisciplinecollectionRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplinecollectionRowChanging As traditionaldisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplinecollectionRowChanged As traditionaldisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplinecollectionRowDeleting As traditionaldisciplinecollectionRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event traditionaldisciplinecollectionRowDeleted As traditionaldisciplinecollectionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtraditionaldisciplinecollectionRow(ByVal row As traditionaldisciplinecollectionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtraditionaldisciplinecollectionRow(ByVal PKey As System.Guid, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleSprintPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleJumpPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleThrowPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleSprintPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleJumpPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleThrowPKey_FK As traditionaldisciplineRow, ByVal parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK As traditionaldisciplineRow) As traditionaldisciplinecollectionRow
            Dim rowtraditionaldisciplinecollectionRow As traditionaldisciplinecollectionRow = CType(Me.NewRow,traditionaldisciplinecollectionRow)
            Dim columnValuesArray() As Object = New Object() {PKey, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleSprintPKey_FK) Is Nothing) Then
                columnValuesArray(1) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleSprintPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleJumpPKey_FK) Is Nothing) Then
                columnValuesArray(2) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleJumpPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleThrowPKey_FK) Is Nothing) Then
                columnValuesArray(3) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleThrowPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK) Is Nothing) Then
                columnValuesArray(4) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleSprintPKey_FK) Is Nothing) Then
                columnValuesArray(5) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleSprintPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleJumpPKey_FK) Is Nothing) Then
                columnValuesArray(6) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleJumpPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleThrowPKey_FK) Is Nothing) Then
                columnValuesArray(7) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleThrowPKey_FK(0)
            End If
            If (Not (parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK) Is Nothing) Then
                columnValuesArray(8) = parenttraditionaldisciplineRowByTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK(0)
            End If
            rowtraditionaldisciplinecollectionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtraditionaldisciplinecollectionRow)
            Return rowtraditionaldisciplinecollectionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByPKey(ByVal PKey As System.Guid) As traditionaldisciplinecollectionRow
            Return CType(Me.Rows.Find(New Object() {PKey}),traditionaldisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As traditionaldisciplinecollectionDataTable = CType(MyBase.Clone,traditionaldisciplinecollectionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New traditionaldisciplinecollectionDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnPKey = MyBase.Columns("PKey")
            Me.columnMaleSprintPKey = MyBase.Columns("MaleSprintPKey")
            Me.columnMaleJumpPKey = MyBase.Columns("MaleJumpPKey")
            Me.columnMaleThrowPKey = MyBase.Columns("MaleThrowPKey")
            Me.columnMaleMiddleDistancePKey = MyBase.Columns("MaleMiddleDistancePKey")
            Me.columnFemaleSprintPKey = MyBase.Columns("FemaleSprintPKey")
            Me.columnFemaleJumpPKey = MyBase.Columns("FemaleJumpPKey")
            Me.columnFemaleThrowPKey = MyBase.Columns("FemaleThrowPKey")
            Me.columnFemaleMiddleDistancePKey = MyBase.Columns("FemaleMiddleDistancePKey")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnPKey = New Global.System.Data.DataColumn("PKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPKey)
            Me.columnMaleSprintPKey = New Global.System.Data.DataColumn("MaleSprintPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleSprintPKey)
            Me.columnMaleJumpPKey = New Global.System.Data.DataColumn("MaleJumpPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleJumpPKey)
            Me.columnMaleThrowPKey = New Global.System.Data.DataColumn("MaleThrowPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleThrowPKey)
            Me.columnMaleMiddleDistancePKey = New Global.System.Data.DataColumn("MaleMiddleDistancePKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaleMiddleDistancePKey)
            Me.columnFemaleSprintPKey = New Global.System.Data.DataColumn("FemaleSprintPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleSprintPKey)
            Me.columnFemaleJumpPKey = New Global.System.Data.DataColumn("FemaleJumpPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleJumpPKey)
            Me.columnFemaleThrowPKey = New Global.System.Data.DataColumn("FemaleThrowPKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleThrowPKey)
            Me.columnFemaleMiddleDistancePKey = New Global.System.Data.DataColumn("FemaleMiddleDistancePKey", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFemaleMiddleDistancePKey)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPKey}, true))
            Me.columnPKey.AllowDBNull = false
            Me.columnPKey.Unique = true
            Me.columnMaleSprintPKey.AllowDBNull = false
            Me.columnMaleJumpPKey.AllowDBNull = false
            Me.columnMaleThrowPKey.AllowDBNull = false
            Me.columnMaleMiddleDistancePKey.AllowDBNull = false
            Me.columnFemaleSprintPKey.AllowDBNull = false
            Me.columnFemaleJumpPKey.AllowDBNull = false
            Me.columnFemaleThrowPKey.AllowDBNull = false
            Me.columnFemaleMiddleDistancePKey.AllowDBNull = false
            Me.ExtendedProperties.Add("Generator_RowClassName", "traditionaldisciplinecollectionRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "traditionaldisciplinecollectionRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "traditionaldisciplinecollectionRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "traditionaldisciplinecollectionDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "traditionaldisciplinecollection")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tabletraditionaldisciplinecollection")
            Me.ExtendedProperties.Add("Generator_UserTableName", "TraditionalDisciplineCollection")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtraditionaldisciplinecollectionRow() As traditionaldisciplinecollectionRow
            Return CType(Me.NewRow,traditionaldisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New traditionaldisciplinecollectionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(traditionaldisciplinecollectionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.traditionaldisciplinecollectionRowChangedEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplinecollectionRowChanged(Me, New traditionaldisciplinecollectionRowChangeEvent(CType(e.Row,traditionaldisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.traditionaldisciplinecollectionRowChangingEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplinecollectionRowChanging(Me, New traditionaldisciplinecollectionRowChangeEvent(CType(e.Row,traditionaldisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.traditionaldisciplinecollectionRowDeletedEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplinecollectionRowDeleted(Me, New traditionaldisciplinecollectionRowChangeEvent(CType(e.Row,traditionaldisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.traditionaldisciplinecollectionRowDeletingEvent) Is Nothing) Then
                RaiseEvent traditionaldisciplinecollectionRowDeleting(Me, New traditionaldisciplinecollectionRowChangeEvent(CType(e.Row,traditionaldisciplinecollectionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetraditionaldisciplinecollectionRow(ByVal row As traditionaldisciplinecollectionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "traditionaldisciplinecollectionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class YearsWithStudentDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of YearsWithStudentDataRow)
        
        Private columnYear As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "YearsWithStudentData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property YearColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYear
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As YearsWithStudentDataRow
            Get
                Return CType(Me.Rows(index),YearsWithStudentDataRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event YearsWithStudentDataRowChanging As YearsWithStudentDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event YearsWithStudentDataRowChanged As YearsWithStudentDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event YearsWithStudentDataRowDeleting As YearsWithStudentDataRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event YearsWithStudentDataRowDeleted As YearsWithStudentDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddYearsWithStudentDataRow(ByVal row As YearsWithStudentDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddYearsWithStudentDataRow(ByVal Year As Integer) As YearsWithStudentDataRow
            Dim rowYearsWithStudentDataRow As YearsWithStudentDataRow = CType(Me.NewRow,YearsWithStudentDataRow)
            Dim columnValuesArray() As Object = New Object() {Year}
            rowYearsWithStudentDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowYearsWithStudentDataRow)
            Return rowYearsWithStudentDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As YearsWithStudentDataDataTable = CType(MyBase.Clone,YearsWithStudentDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New YearsWithStudentDataDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnYear = MyBase.Columns("Year")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnYear = New Global.System.Data.DataColumn("Year", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYear)
            Me.columnYear.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewYearsWithStudentDataRow() As YearsWithStudentDataRow
            Return CType(Me.NewRow,YearsWithStudentDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New YearsWithStudentDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(YearsWithStudentDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.YearsWithStudentDataRowChangedEvent) Is Nothing) Then
                RaiseEvent YearsWithStudentDataRowChanged(Me, New YearsWithStudentDataRowChangeEvent(CType(e.Row,YearsWithStudentDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.YearsWithStudentDataRowChangingEvent) Is Nothing) Then
                RaiseEvent YearsWithStudentDataRowChanging(Me, New YearsWithStudentDataRowChangeEvent(CType(e.Row,YearsWithStudentDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.YearsWithStudentDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent YearsWithStudentDataRowDeleted(Me, New YearsWithStudentDataRowChangeEvent(CType(e.Row,YearsWithStudentDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.YearsWithStudentDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent YearsWithStudentDataRowDeleting(Me, New YearsWithStudentDataRowChangeEvent(CType(e.Row,YearsWithStudentDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveYearsWithStudentDataRow(ByVal row As YearsWithStudentDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As HLDS = New HLDS()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "YearsWithStudentDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class classRow
        Inherits Global.System.Data.DataRow
        
        Private tableclass As classDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableclass = CType(Me.Table,classDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableclass.NameColumn),String)
            End Get
            Set
                Me(Me.tableclass.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassdisciplinerelRows() As classdisciplinerelRow()
            If (Me.Table.ChildRelations("ClassDisciplineRel_ClassName_FK") Is Nothing) Then
                Return New classdisciplinerelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ClassDisciplineRel_ClassName_FK")),classdisciplinerelRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcourseclassrelRows() As courseclassrelRow()
            If (Me.Table.ChildRelations("CourseClassRel_ClassName_FK") Is Nothing) Then
                Return New courseclassrelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CourseClassRel_ClassName_FK")),courseclassrelRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class traditionalreportmetaRow
        Inherits Global.System.Data.DataRow
        
        Private tabletraditionalreportmeta As traditionalreportmetaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletraditionalreportmeta = CType(Me.Table,traditionalreportmetaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionalreportmeta.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionalreportmeta.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tabletraditionalreportmeta.SexColumn),String)
            End Get
            Set
                Me(Me.tabletraditionalreportmeta.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Age() As UInteger
            Get
                Return CType(Me(Me.tabletraditionalreportmeta.AgeColumn),UInteger)
            End Get
            Set
                Me(Me.tabletraditionalreportmeta.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HonoraryCertificateScore() As Integer
            Get
                Return CType(Me(Me.tabletraditionalreportmeta.HonoraryCertificateScoreColumn),Integer)
            End Get
            Set
                Me(Me.tabletraditionalreportmeta.HonoraryCertificateScoreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VictoryCertificateScore() As Integer
            Get
                Return CType(Me(Me.tabletraditionalreportmeta.VictoryCertificateScoreColumn),Integer)
            End Get
            Set
                Me(Me.tabletraditionalreportmeta.VictoryCertificateScoreColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class classdisciplinerelRow
        Inherits Global.System.Data.DataRow
        
        Private tableclassdisciplinerel As classdisciplinerelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableclassdisciplinerel = CType(Me.Table,classdisciplinerelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClassName() As String
            Get
                Return CType(Me(Me.tableclassdisciplinerel.ClassNameColumn),String)
            End Get
            Set
                Me(Me.tableclassdisciplinerel.ClassNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tableclassdisciplinerel.YearColumn),Integer)
            End Get
            Set
                Me(Me.tableclassdisciplinerel.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CompetitionDisciplineCollectionPKey() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableclassdisciplinerel.CompetitionDisciplineCollectionPKeyColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompetitionDisciplineCollectionPKey' in table 'ClassDiscipl"& _ 
                            "ineRel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassdisciplinerel.CompetitionDisciplineCollectionPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TraditionalDisciplineCollectionPKey() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableclassdisciplinerel.TraditionalDisciplineCollectionPKeyColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TraditionalDisciplineCollectionPKey' in table 'ClassDiscipl"& _ 
                            "ineRel' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableclassdisciplinerel.TraditionalDisciplineCollectionPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property classRow() As classRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClassDisciplineRel_ClassName_FK")),classRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClassDisciplineRel_ClassName_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplinecollectionRow() As competitiondisciplinecollectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK")),competitiondisciplinecollectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplinecollectionRow() As traditionaldisciplinecollectionRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK")),traditionaldisciplinecollectionRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCompetitionDisciplineCollectionPKeyNull() As Boolean
            Return Me.IsNull(Me.tableclassdisciplinerel.CompetitionDisciplineCollectionPKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCompetitionDisciplineCollectionPKeyNull()
            Me(Me.tableclassdisciplinerel.CompetitionDisciplineCollectionPKeyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTraditionalDisciplineCollectionPKeyNull() As Boolean
            Return Me.IsNull(Me.tableclassdisciplinerel.TraditionalDisciplineCollectionPKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTraditionalDisciplineCollectionPKeyNull()
            Me(Me.tableclassdisciplinerel.TraditionalDisciplineCollectionPKeyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class competitionRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompetition As competitionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompetition = CType(Me.Table,competitionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StudentPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetition.StudentPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetition.StudentPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tablecompetition.YearColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetition.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sprint() As Single
            Get
                Try 
                    Return CType(Me(Me.tablecompetition.SprintColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Sprint' in table 'Competition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompetition.SprintColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Jump() As Single
            Get
                Try 
                    Return CType(Me(Me.tablecompetition.JumpColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jump' in table 'Competition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompetition.JumpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _Throw() As Single
            Get
                Try 
                    Return CType(Me(Me.tablecompetition.ThrowColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Throw' in table 'Competition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompetition.ThrowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MiddleDistance() As Single
            Get
                Try 
                    Return CType(Me(Me.tablecompetition.MiddleDistanceColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MiddleDistance' in table 'Competition' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecompetition.MiddleDistanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property studentRow() As studentRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Competition_StudentPKey_FK")),studentRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Competition_StudentPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSprintNull() As Boolean
            Return Me.IsNull(Me.tablecompetition.SprintColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSprintNull()
            Me(Me.tablecompetition.SprintColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsJumpNull() As Boolean
            Return Me.IsNull(Me.tablecompetition.JumpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetJumpNull()
            Me(Me.tablecompetition.JumpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Is_ThrowNull() As Boolean
            Return Me.IsNull(Me.tablecompetition.ThrowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Set_ThrowNull()
            Me(Me.tablecompetition.ThrowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMiddleDistanceNull() As Boolean
            Return Me.IsNull(Me.tablecompetition.MiddleDistanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMiddleDistanceNull()
            Me(Me.tablecompetition.MiddleDistanceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class competitiondisciplineRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompetitiondiscipline As competitiondisciplineDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompetitiondiscipline = CType(Me.Table,competitiondisciplineDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondiscipline.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondiscipline.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tablecompetitiondiscipline.TypeColumn),String)
            End Get
            Set
                Me(Me.tablecompetitiondiscipline.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tablecompetitiondiscipline.NameColumn),String)
            End Get
            Set
                Me(Me.tablecompetitiondiscipline.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Unit() As String
            Get
                Return CType(Me(Me.tablecompetitiondiscipline.UnitColumn),String)
            End Get
            Set
                Me(Me.tablecompetitiondiscipline.UnitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LowIsBetter() As Boolean
            Get
                Return CType(Me(Me.tablecompetitiondiscipline.LowIsBetterColumn),Boolean)
            End Get
            Set
                Me(Me.tablecompetitiondiscipline.LowIsBetterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_FemaleJumpPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleJumpPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleJumpPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_FemaleSprintPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleSprintPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleSprintPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_FemaleThrowPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleThrowPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_FemaleThrowPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_MaleJumpPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleJumpPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleJumpPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_MaleSprintPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleSprintPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleSprintPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitiondisciplinecollectionRowsByCompetitionDisciplineCollection_MaleThrowPKey_FK() As competitiondisciplinecollectionRow()
            If (Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleThrowPKey_FK") Is Nothing) Then
                Return New competitiondisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CompetitionDisciplineCollection_MaleThrowPKey_FK")),competitiondisciplinecollectionRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class competitiondisciplinecollectionRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompetitiondisciplinecollection As competitiondisciplinecollectionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompetitiondisciplinecollection = CType(Me.Table,competitiondisciplinecollectionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleSprintPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.MaleSprintPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.MaleSprintPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleJumpPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.MaleJumpPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.MaleJumpPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleThrowPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.MaleThrowPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.MaleThrowPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleMiddleDistancePKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.MaleMiddleDistancePKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.MaleMiddleDistancePKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleSprintPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.FemaleSprintPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.FemaleSprintPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleJumpPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.FemaleJumpPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.FemaleJumpPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleThrowPKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.FemaleThrowPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.FemaleThrowPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleMiddleDistancePKey() As System.Guid
            Get
                Return CType(Me(Me.tablecompetitiondisciplinecollection.FemaleMiddleDistancePKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablecompetitiondisciplinecollection.FemaleMiddleDistancePKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_FemaleJumpPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleJumpPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleJumpPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleMiddleDistancePKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_FemaleSprintPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleSprintPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleSprintPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_FemaleThrowPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleThrowPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_FemaleThrowPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_MaleJumpPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleJumpPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleJumpPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_MaleMiddleDistancePKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleMiddleDistancePKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_MaleSprintPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleSprintPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleSprintPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property competitiondisciplineRowByCompetitionDisciplineCollection_MaleThrowPKey_FK() As competitiondisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleThrowPKey_FK")),competitiondisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CompetitionDisciplineCollection_MaleThrowPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassdisciplinerelRows() As classdisciplinerelRow()
            If (Me.Table.ChildRelations("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK") Is Nothing) Then
                Return New classdisciplinerelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ClassDisciplineRel_CompetitionDisciplineCollectionPKey_FK")),classdisciplinerelRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class competitionreportmetaRow
        Inherits Global.System.Data.DataRow
        
        Private tablecompetitionreportmeta As competitionreportmetaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecompetitionreportmeta = CType(Me.Table,competitionreportmetaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.YearColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HonoraryCertificatePercentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.HonoraryCertificatePercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.HonoraryCertificatePercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property VictoryCertificatePercentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.VictoryCertificatePercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.VictoryCertificatePercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Grade1Percentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.Grade1PercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.Grade1PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Grade2Percentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.Grade2PercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.Grade2PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Grade3Percentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.Grade3PercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.Grade3PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Grade4Percentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.Grade4PercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.Grade4PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Grade5Percentage() As Integer
            Get
                Return CType(Me(Me.tablecompetitionreportmeta.Grade5PercentageColumn),Integer)
            End Get
            Set
                Me(Me.tablecompetitionreportmeta.Grade5PercentageColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class courseclassrelRow
        Inherits Global.System.Data.DataRow
        
        Private tablecourseclassrel As courseclassrelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablecourseclassrel = CType(Me.Table,courseclassrelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tablecourseclassrel.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tablecourseclassrel.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClassName() As String
            Get
                Return CType(Me(Me.tablecourseclassrel.ClassNameColumn),String)
            End Get
            Set
                Me(Me.tablecourseclassrel.ClassNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property classRow() As classRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CourseClassRel_ClassName_FK")),classRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CourseClassRel_ClassName_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetstudentcourserelRows() As studentcourserelRow()
            If (Me.Table.ChildRelations("StudentCourseRel_CoursePKey_FK") Is Nothing) Then
                Return New studentcourserelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("StudentCourseRel_CoursePKey_FK")),studentcourserelRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class studentRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudent As studentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudent = CType(Me.Table,studentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tablestudent.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablestudent.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Surname() As String
            Get
                Return CType(Me(Me.tablestudent.SurnameColumn),String)
            End Get
            Set
                Me(Me.tablestudent.SurnameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Forename() As String
            Get
                Return CType(Me(Me.tablestudent.ForenameColumn),String)
            End Get
            Set
                Me(Me.tablestudent.ForenameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tablestudent.SexColumn),String)
            End Get
            Set
                Me(Me.tablestudent.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property YearOfBirth() As Integer
            Get
                Return CType(Me(Me.tablestudent.YearOfBirthColumn),Integer)
            End Get
            Set
                Me(Me.tablestudent.YearOfBirthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetcompetitionRows() As competitionRow()
            If (Me.Table.ChildRelations("Competition_StudentPKey_FK") Is Nothing) Then
                Return New competitionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Competition_StudentPKey_FK")),competitionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetstudentcourserelRows() As studentcourserelRow()
            If (Me.Table.ChildRelations("StudentCourseRel_StudentPKey_FK") Is Nothing) Then
                Return New studentcourserelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("StudentCourseRel_StudentPKey_FK")),studentcourserelRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class studentcourserelRow
        Inherits Global.System.Data.DataRow
        
        Private tablestudentcourserel As studentcourserelDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablestudentcourserel = CType(Me.Table,studentcourserelDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StudentPKey() As System.Guid
            Get
                Return CType(Me(Me.tablestudentcourserel.StudentPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tablestudentcourserel.StudentPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CourseName() As String
            Get
                Return CType(Me(Me.tablestudentcourserel.CourseNameColumn),String)
            End Get
            Set
                Me(Me.tablestudentcourserel.CourseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tablestudentcourserel.YearColumn),Integer)
            End Get
            Set
                Me(Me.tablestudentcourserel.YearColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property courseclassrelRow() As courseclassrelRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StudentCourseRel_CoursePKey_FK")),courseclassrelRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StudentCourseRel_CoursePKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property studentRow() As studentRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("StudentCourseRel_StudentPKey_FK")),studentRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("StudentCourseRel_StudentPKey_FK"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class traditionaldisciplineRow
        Inherits Global.System.Data.DataRow
        
        Private tabletraditionaldiscipline As traditionaldisciplineDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletraditionaldiscipline = CType(Me.Table,traditionaldisciplineDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Type() As String
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.TypeColumn),String)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Sex() As String
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.SexColumn),String)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.NameColumn),String)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UnitSymbol() As String
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.UnitSymbolColumn),String)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.UnitSymbolColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Distance() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletraditionaldiscipline.DistanceColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Distance' in table 'TraditionalDiscipline' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.DistanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Overhead() As Single
            Get
                Try 
                    Return CType(Me(Me.tabletraditionaldiscipline.OverheadColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Overhead' in table 'TraditionalDiscipline' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.OverheadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ConstantA() As Single
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.ConstantAColumn),Single)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.ConstantAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ConstantC() As Single
            Get
                Return CType(Me(Me.tabletraditionaldiscipline.ConstantCColumn),Single)
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.ConstantCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Measurement() As String
            Get
                Try 
                    Return CType(Me(Me.tabletraditionaldiscipline.MeasurementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Measurement' in table 'TraditionalDiscipline' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletraditionaldiscipline.MeasurementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDistanceNull() As Boolean
            Return Me.IsNull(Me.tabletraditionaldiscipline.DistanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDistanceNull()
            Me(Me.tabletraditionaldiscipline.DistanceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOverheadNull() As Boolean
            Return Me.IsNull(Me.tabletraditionaldiscipline.OverheadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOverheadNull()
            Me(Me.tabletraditionaldiscipline.OverheadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMeasurementNull() As Boolean
            Return Me.IsNull(Me.tabletraditionaldiscipline.MeasurementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMeasurementNull()
            Me(Me.tabletraditionaldiscipline.MeasurementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_FemaleJumpPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleJumpPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleJumpPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_FemaleSprintPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleSprintPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleSprintPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_FemaleThrowPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleThrowPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_FemaleThrowPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_MaleJumpPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleJumpPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleJumpPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_MaleSprintPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleSprintPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleSprintPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GettraditionaldisciplinecollectionRowsByTraditionalDisciplineCollection_MaleThrowPKey_FK() As traditionaldisciplinecollectionRow()
            If (Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleThrowPKey_FK") Is Nothing) Then
                Return New traditionaldisciplinecollectionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TraditionalDisciplineCollection_MaleThrowPKey_FK")),traditionaldisciplinecollectionRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class traditionaldisciplinecollectionRow
        Inherits Global.System.Data.DataRow
        
        Private tabletraditionaldisciplinecollection As traditionaldisciplinecollectionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletraditionaldisciplinecollection = CType(Me.Table,traditionaldisciplinecollectionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.PKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.PKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleSprintPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.MaleSprintPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.MaleSprintPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleJumpPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.MaleJumpPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.MaleJumpPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleThrowPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.MaleThrowPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.MaleThrowPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MaleMiddleDistancePKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.MaleMiddleDistancePKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.MaleMiddleDistancePKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleSprintPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.FemaleSprintPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.FemaleSprintPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleJumpPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.FemaleJumpPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.FemaleJumpPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleThrowPKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.FemaleThrowPKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.FemaleThrowPKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FemaleMiddleDistancePKey() As System.Guid
            Get
                Return CType(Me(Me.tabletraditionaldisciplinecollection.FemaleMiddleDistancePKeyColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tabletraditionaldisciplinecollection.FemaleMiddleDistancePKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_FemaleJumpPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleJumpPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleJumpPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleMiddleDistancePKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_FemaleSprintPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleSprintPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleSprintPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_FemaleThrowPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleThrowPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_FemaleThrowPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_MaleJumpPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleJumpPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleJumpPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_MaleMiddleDistancePKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleMiddleDistancePKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_MaleSprintPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleSprintPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleSprintPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property traditionaldisciplineRowByTraditionalDisciplineCollection_MaleThrowPKey_FK() As traditionaldisciplineRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleThrowPKey_FK")),traditionaldisciplineRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TraditionalDisciplineCollection_MaleThrowPKey_FK"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetclassdisciplinerelRows() As classdisciplinerelRow()
            If (Me.Table.ChildRelations("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK") Is Nothing) Then
                Return New classdisciplinerelRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ClassDisciplineRel_TraditionalDisciplineCollectionPKey_FK")),classdisciplinerelRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class YearsWithStudentDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableYearsWithStudentData As YearsWithStudentDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableYearsWithStudentData = CType(Me.Table,YearsWithStudentDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property Year() As Integer
            Get
                Return CType(Me(Me.tableYearsWithStudentData.YearColumn),Integer)
            End Get
            Set
                Me(Me.tableYearsWithStudentData.YearColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class classRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As classRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As classRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As classRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class traditionalreportmetaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As traditionalreportmetaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As traditionalreportmetaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As traditionalreportmetaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class classdisciplinerelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As classdisciplinerelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As classdisciplinerelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As classdisciplinerelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class competitionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As competitionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As competitionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As competitionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class competitiondisciplineRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As competitiondisciplineRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As competitiondisciplineRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As competitiondisciplineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class competitiondisciplinecollectionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As competitiondisciplinecollectionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As competitiondisciplinecollectionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As competitiondisciplinecollectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class competitionreportmetaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As competitionreportmetaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As competitionreportmetaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As competitionreportmetaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class courseclassrelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As courseclassrelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As courseclassrelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As courseclassrelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class studentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As studentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As studentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class studentcourserelRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As studentcourserelRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As studentcourserelRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As studentcourserelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class traditionaldisciplineRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As traditionaldisciplineRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As traditionaldisciplineRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As traditionaldisciplineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class traditionaldisciplinecollectionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As traditionaldisciplinecollectionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As traditionaldisciplinecollectionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As traditionaldisciplinecollectionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class YearsWithStudentDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As YearsWithStudentDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As YearsWithStudentDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As YearsWithStudentDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace HLDSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class classTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Class"
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `class` WHERE ((`Name` = @p1))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `class` (`Name`) VALUES (@p1)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
            param.IsNullable = true
            param.SourceColumn = "Name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `class` SET `Name` = @p1 WHERE ((`Name` = @p2))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@p1"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
            param.IsNullable = true
            param.SourceColumn = "Name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@p2"
            param.DbType = Global.System.Data.DbType.StringFixedLength
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
            param.IsNullable = true
            param.SourceColumn = "Name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `Name` FROM `class`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.classDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.classDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.classDataTable = New HLDS.classDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.classDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "Class")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As String, ByVal p2 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, String)
      End If
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String) As Integer
      Return Me.Update(p2, p2)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class traditionalreportmetaTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "TraditionalReportMeta"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("Sex", "Sex")
      tableMapping.ColumnMappings.Add("Age", "Age")
      tableMapping.ColumnMappings.Add("HonoraryCertificateScore", "HonoraryCertificateScore")
      tableMapping.ColumnMappings.Add("VictoryCertificateScore", "VictoryCertificateScore")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `traditionalreportmeta` WHERE ((`PKey` = @p1) AND (`Sex` = @p2) AND (" & _
          "`Age` = @p3) AND (`HonoraryCertificateScore` = @p4) AND (`VictoryCertificateScor" & _
          "e` = @p5))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.UInt32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
      param.IsNullable = True
      param.SourceColumn = "Age"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificateScore"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificateScore"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `traditionalreportmeta` (`PKey`, `Sex`, `Age`, `HonoraryCertificateSc" & _
          "ore`, `VictoryCertificateScore`) VALUES (@p1, @p2, @p3, @p4, @p5)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.UInt32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
      param.IsNullable = True
      param.SourceColumn = "Age"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificateScore"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificateScore"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `traditionalreportmeta` SET `PKey` = @p1, `Sex` = @p2, `Age` = @p3, `Honor" & _
          "aryCertificateScore` = @p4, `VictoryCertificateScore` = @p5 WHERE ((`PKey` = @p6" & _
          ") AND (`Sex` = @p7) AND (`Age` = @p8) AND (`HonoraryCertificateScore` = @p9) AND" & _
          " (`VictoryCertificateScore` = @p10))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.UInt32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
      param.IsNullable = True
      param.SourceColumn = "Age"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificateScore"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificateScore"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.UInt32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
      param.IsNullable = True
      param.SourceColumn = "Age"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificateScore"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificateScore"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `Sex`, `Age`, `HonoraryCertificateScore`, `VictoryCertificateScore" & _
          "` FROM `traditionalreportmeta`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.traditionalreportmetaDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.traditionalreportmetaDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.traditionalreportmetaDataTable = New HLDS.traditionalreportmetaDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.traditionalreportmetaDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "TraditionalReportMeta")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As UInteger, ByVal p4 As Integer, ByVal p5 As Integer) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, UInteger)
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As UInteger, ByVal p4 As Integer, ByVal p5 As Integer) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, UInteger)
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As UInteger, ByVal p4 As Integer, ByVal p5 As Integer, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As UInteger, ByVal p9 As Integer, ByVal p10 As Integer) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, UInteger)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, Integer)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, System.Guid)
      If (p7 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p7")
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, UInteger)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, Integer)
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String, ByVal p3 As UInteger, ByVal p4 As Integer, ByVal p5 As Integer, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As UInteger, ByVal p9 As Integer, ByVal p10 As Integer) As Integer
      Return Me.Update(p6, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class classdisciplinerelTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "ClassDisciplineRel"
      tableMapping.ColumnMappings.Add("ClassName", "ClassName")
      tableMapping.ColumnMappings.Add("Year", "Year")
      tableMapping.ColumnMappings.Add("CompetitionDisciplineCollectionPKey", "CompetitionDisciplineCollectionPKey")
      tableMapping.ColumnMappings.Add("TraditionalDisciplineCollectionPKey", "TraditionalDisciplineCollectionPKey")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `classdisciplinerel` WHERE ((`ClassName` = @p1) AND (`Year` = @p2) AN" & _
          "D ((@p3 = 1 AND `CompetitionDisciplineCollectionPKey` IS NULL) OR (`CompetitionD" & _
          "isciplineCollectionPKey` = @p4)) AND ((@p5 = 1 AND `TraditionalDisciplineCollect" & _
          "ionPKey` IS NULL) OR (`TraditionalDisciplineCollectionPKey` = @p6)))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `classdisciplinerel` (`ClassName`, `Year`, `CompetitionDisciplineColl" & _
          "ectionPKey`, `TraditionalDisciplineCollectionPKey`) VALUES (@p1, @p2, @p3, @p4)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `classdisciplinerel` SET `ClassName` = @p1, `Year` = @p2, `CompetitionDisc" & _
          "iplineCollectionPKey` = @p3, `TraditionalDisciplineCollectionPKey` = @p4 WHERE (" & _
          "(`ClassName` = @p5) AND (`Year` = @p6) AND ((@p7 = 1 AND `CompetitionDisciplineC" & _
          "ollectionPKey` IS NULL) OR (`CompetitionDisciplineCollectionPKey` = @p8)) AND ((" & _
          "@p9 = 1 AND `TraditionalDisciplineCollectionPKey` IS NULL) OR (`TraditionalDisci" & _
          "plineCollectionPKey` = @p10)))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "CompetitionDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "TraditionalDisciplineCollectionPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `ClassName`, `Year`, `CompetitionDisciplineCollectionPKey`, `TraditionalDi" & _
          "sciplineCollectionPKey` FROM `classdisciplinerel`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.classdisciplinerelDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.classdisciplinerelDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.classdisciplinerelDataTable = New HLDS.classdisciplinerelDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.classdisciplinerelDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "ClassDisciplineRel")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As String, ByVal p2 As Date, ByVal p4 As Global.System.Nullable(Of Global.System.Guid), ByVal p6 As Global.System.Nullable(Of Global.System.Guid)) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, Date)
      If (p4.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4.Value, System.Guid)
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6.Value, System.Guid)
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As String, ByVal p2 As Date, ByVal p3 As Global.System.Nullable(Of Global.System.Guid), ByVal p4 As Global.System.Nullable(Of Global.System.Guid)) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, String)
      End If
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, Date)
      If (p3.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value, System.Guid)
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
      End If
      If (p4.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value, System.Guid)
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As String, ByVal p2 As Date, ByVal p3 As Global.System.Nullable(Of Global.System.Guid), ByVal p4 As Global.System.Nullable(Of Global.System.Guid), ByVal p5 As String, ByVal p6 As Date, ByVal p8 As Global.System.Nullable(Of Global.System.Guid), ByVal p10 As Global.System.Nullable(Of Global.System.Guid)) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, Date)
      If (p3.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value, System.Guid)
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
      End If
      If (p4.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value, System.Guid)
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      If (p5 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p5")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, Date)
      If (p8.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8.Value, System.Guid)
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
      End If
      If (p10.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value, System.Guid)
      Else
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p3 As Global.System.Nullable(Of Global.System.Guid), ByVal p4 As Global.System.Nullable(Of Global.System.Guid), ByVal p5 As String, ByVal p6 As Date, ByVal p8 As Global.System.Nullable(Of Global.System.Guid), ByVal p10 As Global.System.Nullable(Of Global.System.Guid)) As Integer
      Return Me.Update(p5, p6, p3, p4, p5, p6, p8, p10)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class competitionTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "Competition"
      tableMapping.ColumnMappings.Add("StudentPKey", "StudentPKey")
      tableMapping.ColumnMappings.Add("Year", "Year")
      tableMapping.ColumnMappings.Add("Sprint", "Sprint")
      tableMapping.ColumnMappings.Add("Jump", "Jump")
      tableMapping.ColumnMappings.Add("Throw", "Throw")
      tableMapping.ColumnMappings.Add("MiddleDistance", "MiddleDistance")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `competition` WHERE ((`StudentPKey` = @p1) AND (`Year` = @p2) AND ((@" & _
          "p3 = 1 AND `Sprint` IS NULL) OR (`Sprint` = @p4)) AND ((@p5 = 1 AND `Jump` IS NU" & _
          "LL) OR (`Jump` = @p6)) AND ((@p7 = 1 AND `Throw` IS NULL) OR (`Throw` = @p8)) AN" & _
          "D ((@p9 = 1 AND `MiddleDistance` IS NULL) OR (`MiddleDistance` = @p10)))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Jump"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Jump"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Throw"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Throw"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `competition` (`StudentPKey`, `Year`, `Sprint`, `Jump`, `Throw`, `Mid" & _
          "dleDistance`) VALUES (@p1, @p2, @p3, @p4, @p5, @p6)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Jump"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Throw"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `competition` SET `StudentPKey` = @p1, `Year` = @p2, `Sprint` = @p3, `Jump" & _
          "` = @p4, `Throw` = @p5, `MiddleDistance` = @p6 WHERE ((`StudentPKey` = @p7) AND " & _
          "(`Year` = @p8) AND ((@p9 = 1 AND `Sprint` IS NULL) OR (`Sprint` = @p10)) AND ((@" & _
          "p11 = 1 AND `Jump` IS NULL) OR (`Jump` = @p12)) AND ((@p13 = 1 AND `Throw` IS NU" & _
          "LL) OR (`Throw` = @p14)) AND ((@p15 = 1 AND `MiddleDistance` IS NULL) OR (`Middl" & _
          "eDistance` = @p16)))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Jump"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Throw"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Sprint"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Jump"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Jump"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Throw"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p14"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Throw"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p15"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p16"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "MiddleDistance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `StudentPKey`, `Year`, `Sprint`, `Jump`, `Throw`, `MiddleDistance` FROM `c" & _
          "ompetition`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.competitionDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.competitionDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.competitionDataTable = New HLDS.competitionDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.competitionDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "Competition")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As Date, ByVal p4 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p8 As Global.System.Nullable(Of Single), ByVal p10 As Global.System.Nullable(Of Single)) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, Date)
      If (p4.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4.Value, Single)
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6.Value, Single)
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      If (p8.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8.Value, Single)
      Else
        Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
      End If
      If (p10.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(9).Value = CType(p10.Value, Single)
      Else
        Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As Date, ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single)) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, Date)
      If (p3.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3.Value, Single)
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
      End If
      If (p4.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4.Value, Single)
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      If (p5.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5.Value, Single)
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value, Single)
      Else
        Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As System.Guid, ByVal p2 As Date, ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p7 As System.Guid, ByVal p8 As Date, ByVal p10 As Global.System.Nullable(Of Single), ByVal p12 As Global.System.Nullable(Of Single), ByVal p14 As Global.System.Nullable(Of Single), ByVal p16 As Global.System.Nullable(Of Single)) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, Date)
      If (p3.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
      End If
      If (p4.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
      End If
      If (p5.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, Date)
      If (p10.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
      End If
      If (p12.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
      End If
      If (p14.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
      End If
      If (p16.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p3 As Global.System.Nullable(Of Single), ByVal p4 As Global.System.Nullable(Of Single), ByVal p5 As Global.System.Nullable(Of Single), ByVal p6 As Global.System.Nullable(Of Single), ByVal p7 As System.Guid, ByVal p8 As Date, ByVal p10 As Global.System.Nullable(Of Single), ByVal p12 As Global.System.Nullable(Of Single), ByVal p14 As Global.System.Nullable(Of Single), ByVal p16 As Global.System.Nullable(Of Single)) As Integer
      Return Me.Update(p7, p8, p3, p4, p5, p6, p7, p8, p10, p12, p14, p16)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class competitiondisciplineTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "CompetitionDiscipline"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("Type", "Type")
      tableMapping.ColumnMappings.Add("Name", "Name")
      tableMapping.ColumnMappings.Add("Unit", "Unit")
      tableMapping.ColumnMappings.Add("LowIsBetter", "LowIsBetter")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `competitiondiscipline` WHERE ((`PKey` = @p1) AND (`Type` = @p2) AND " & _
          "(`Name` = @p3) AND (`Unit` = @p4) AND (`LowIsBetter` = @p5))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Unit"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[SByte]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
      param.IsNullable = True
      param.SourceColumn = "LowIsBetter"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `competitiondiscipline` (`PKey`, `Type`, `Name`, `Unit`, `LowIsBetter" & _
          "`) VALUES (@p1, @p2, @p3, @p4, @p5)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Unit"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[SByte]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
      param.IsNullable = True
      param.SourceColumn = "LowIsBetter"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `competitiondiscipline` SET `PKey` = @p1, `Type` = @p2, `Name` = @p3, `Uni" & _
          "t` = @p4, `LowIsBetter` = @p5 WHERE ((`PKey` = @p6) AND (`Type` = @p7) AND (`Nam" & _
          "e` = @p8) AND (`Unit` = @p9) AND (`LowIsBetter` = @p10))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Unit"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[SByte]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
      param.IsNullable = True
      param.SourceColumn = "LowIsBetter"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Unit"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.[SByte]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[Byte]
      param.IsNullable = True
      param.SourceColumn = "LowIsBetter"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `Type`, `Name`, `Unit`, `LowIsBetter` FROM `competitiondiscipline`" & _
          ""
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.competitiondisciplineDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.competitiondisciplineDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.competitiondisciplineDataTable = New HLDS.competitiondisciplineDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.competitiondisciplineDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "CompetitionDiscipline")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Byte) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, Byte)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Byte) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, Byte)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Byte, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As Byte) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, Byte)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, System.Guid)
      If (p7 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p7")
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, String)
      End If
      If (p8 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p8")
      Else
        Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, String)
      End If
      If (p9 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p9")
      Else
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, Byte)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Byte, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As Byte) As Integer
      Return Me.Update(p6, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class competitiondisciplinecollectionTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "CompetitionDisciplineCollection"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("MaleSprintPKey", "MaleSprintPKey")
      tableMapping.ColumnMappings.Add("MaleJumpPKey", "MaleJumpPKey")
      tableMapping.ColumnMappings.Add("MaleThrowPKey", "MaleThrowPKey")
      tableMapping.ColumnMappings.Add("MaleMiddleDistancePKey", "MaleMiddleDistancePKey")
      tableMapping.ColumnMappings.Add("FemaleSprintPKey", "FemaleSprintPKey")
      tableMapping.ColumnMappings.Add("FemaleJumpPKey", "FemaleJumpPKey")
      tableMapping.ColumnMappings.Add("FemaleThrowPKey", "FemaleThrowPKey")
      tableMapping.ColumnMappings.Add("FemaleMiddleDistancePKey", "FemaleMiddleDistancePKey")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `competitiondisciplinecollection` WHERE ((`PKey` = @p1) AND (`MaleSpr" & _
          "intPKey` = @p2) AND (`MaleJumpPKey` = @p3) AND (`MaleThrowPKey` = @p4) AND (`Mal" & _
          "eMiddleDistancePKey` = @p5) AND (`FemaleSprintPKey` = @p6) AND (`FemaleJumpPKey`" & _
          " = @p7) AND (`FemaleThrowPKey` = @p8) AND (`FemaleMiddleDistancePKey` = @p9))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `competitiondisciplinecollection` (`PKey`, `MaleSprintPKey`, `MaleJum" & _
          "pPKey`, `MaleThrowPKey`, `MaleMiddleDistancePKey`, `FemaleSprintPKey`, `FemaleJu" & _
          "mpPKey`, `FemaleThrowPKey`, `FemaleMiddleDistancePKey`) VALUES (@p1, @p2, @p3, @" & _
          "p4, @p5, @p6, @p7, @p8, @p9)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `competitiondisciplinecollection` SET `PKey` = @p1, `MaleSprintPKey` = @p2" & _
          ", `MaleJumpPKey` = @p3, `MaleThrowPKey` = @p4, `MaleMiddleDistancePKey` = @p5, `" & _
          "FemaleSprintPKey` = @p6, `FemaleJumpPKey` = @p7, `FemaleThrowPKey` = @p8, `Femal" & _
          "eMiddleDistancePKey` = @p9 WHERE ((`PKey` = @p10) AND (`MaleSprintPKey` = @p11) " & _
          "AND (`MaleJumpPKey` = @p12) AND (`MaleThrowPKey` = @p13) AND (`MaleMiddleDistanc" & _
          "ePKey` = @p14) AND (`FemaleSprintPKey` = @p15) AND (`FemaleJumpPKey` = @p16) AND" & _
          " (`FemaleThrowPKey` = @p17) AND (`FemaleMiddleDistancePKey` = @p18))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p14"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p15"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p16"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p17"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p18"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `MaleSprintPKey`, `MaleJumpPKey`, `MaleThrowPKey`, `MaleMiddleDist" & _
          "ancePKey`, `FemaleSprintPKey`, `FemaleJumpPKey`, `FemaleThrowPKey`, `FemaleMiddl" & _
          "eDistancePKey` FROM `competitiondisciplinecollection`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.competitiondisciplinecollectionDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.competitiondisciplinecollectionDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.competitiondisciplinecollectionDataTable = New HLDS.competitiondisciplinecollectionDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.competitiondisciplinecollectionDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "CompetitionDisciplineCollection")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As System.Guid, ByVal p3 As System.Guid, ByVal p4 As System.Guid, ByVal p5 As System.Guid, ByVal p6 As System.Guid, ByVal p7 As System.Guid, ByVal p8 As System.Guid, ByVal p9 As System.Guid) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As System.Guid, ByVal p3 As System.Guid, ByVal p4 As System.Guid, ByVal p5 As System.Guid, ByVal p6 As System.Guid, ByVal p7 As System.Guid, ByVal p8 As System.Guid, ByVal p9 As System.Guid) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p1 As System.Guid, _
                    ByVal p2 As System.Guid, _
                    ByVal p3 As System.Guid, _
                    ByVal p4 As System.Guid, _
                    ByVal p5 As System.Guid, _
                    ByVal p6 As System.Guid, _
                    ByVal p7 As System.Guid, _
                    ByVal p8 As System.Guid, _
                    ByVal p9 As System.Guid, _
                    ByVal p10 As System.Guid, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As System.Guid, _
                    ByVal p13 As System.Guid, _
                    ByVal p14 As System.Guid, _
                    ByVal p15 As System.Guid, _
                    ByVal p16 As System.Guid, _
                    ByVal p17 As System.Guid, _
                    ByVal p18 As System.Guid) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p2 As System.Guid, _
                    ByVal p3 As System.Guid, _
                    ByVal p4 As System.Guid, _
                    ByVal p5 As System.Guid, _
                    ByVal p6 As System.Guid, _
                    ByVal p7 As System.Guid, _
                    ByVal p8 As System.Guid, _
                    ByVal p9 As System.Guid, _
                    ByVal p10 As System.Guid, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As System.Guid, _
                    ByVal p13 As System.Guid, _
                    ByVal p14 As System.Guid, _
                    ByVal p15 As System.Guid, _
                    ByVal p16 As System.Guid, _
                    ByVal p17 As System.Guid, _
                    ByVal p18 As System.Guid) As Integer
      Return Me.Update(p10, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class competitionreportmetaTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "CompetitionReportMeta"
      tableMapping.ColumnMappings.Add("Year", "Year")
      tableMapping.ColumnMappings.Add("HonoraryCertificatePercentage", "HonoraryCertificatePercentage")
      tableMapping.ColumnMappings.Add("VictoryCertificatePercentage", "VictoryCertificatePercentage")
      tableMapping.ColumnMappings.Add("Grade1Percentage", "Grade1Percentage")
      tableMapping.ColumnMappings.Add("Grade2Percentage", "Grade2Percentage")
      tableMapping.ColumnMappings.Add("Grade3Percentage", "Grade3Percentage")
      tableMapping.ColumnMappings.Add("Grade4Percentage", "Grade4Percentage")
      tableMapping.ColumnMappings.Add("Grade5Percentage", "Grade5Percentage")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `competitionreportmeta` WHERE ((`Year` = @p1) AND (`HonoraryCertifica" & _
          "tePercentage` = @p2) AND (`VictoryCertificatePercentage` = @p3) AND (`Grade1Perc" & _
          "entage` = @p4) AND (`Grade2Percentage` = @p5) AND (`Grade3Percentage` = @p6) AND" & _
          " (`Grade4Percentage` = @p7) AND (`Grade5Percentage` = @p8))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificatePercentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificatePercentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade1Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade2Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade3Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade4Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade5Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `competitionreportmeta` (`Year`, `HonoraryCertificatePercentage`, `Vi" & _
          "ctoryCertificatePercentage`, `Grade1Percentage`, `Grade2Percentage`, `Grade3Perc" & _
          "entage`, `Grade4Percentage`, `Grade5Percentage`) VALUES (@p1, @p2, @p3, @p4, @p5" & _
          ", @p6, @p7, @p8)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificatePercentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificatePercentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade1Percentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade2Percentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade3Percentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade4Percentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade5Percentage"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `competitionreportmeta` SET `Year` = @p1, `HonoraryCertificatePercentage` " & _
          "= @p2, `VictoryCertificatePercentage` = @p3, `Grade1Percentage` = @p4, `Grade2Pe" & _
          "rcentage` = @p5, `Grade3Percentage` = @p6, `Grade4Percentage` = @p7, `Grade5Perc" & _
          "entage` = @p8 WHERE ((`Year` = @p9) AND (`HonoraryCertificatePercentage` = @p10)" & _
          " AND (`VictoryCertificatePercentage` = @p11) AND (`Grade1Percentage` = @p12) AND" & _
          " (`Grade2Percentage` = @p13) AND (`Grade3Percentage` = @p14) AND (`Grade4Percent" & _
          "age` = @p15) AND (`Grade5Percentage` = @p16))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificatePercentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificatePercentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade1Percentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade2Percentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade3Percentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade4Percentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade5Percentage"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "HonoraryCertificatePercentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "VictoryCertificatePercentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade1Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade2Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p14"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade3Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p15"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade4Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p16"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Grade5Percentage"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `Year`, `HonoraryCertificatePercentage`, `VictoryCertificatePercentage`, `" & _
          "Grade1Percentage`, `Grade2Percentage`, `Grade3Percentage`, `Grade4Percentage`, `" & _
          "Grade5Percentage` FROM `competitionreportmeta`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.competitionreportmetaDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.competitionreportmetaDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.competitionreportmetaDataTable = New HLDS.competitionreportmetaDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.competitionreportmetaDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "CompetitionReportMeta")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As Date, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer, ByVal p5 As Integer, ByVal p6 As Integer, ByVal p7 As Integer, ByVal p8 As Integer) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, Date)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, Integer)
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, Integer)
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, Integer)
      Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6, Integer)
      Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7, Integer)
      Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As Date, ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer, ByVal p5 As Integer, ByVal p6 As Integer, ByVal p7 As Integer, ByVal p8 As Integer) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, Date)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, Integer)
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, Integer)
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, Integer)
      Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6, Integer)
      Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7, Integer)
      Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p1 As Date, _
                    ByVal p2 As Integer, _
                    ByVal p3 As Integer, _
                    ByVal p4 As Integer, _
                    ByVal p5 As Integer, _
                    ByVal p6 As Integer, _
                    ByVal p7 As Integer, _
                    ByVal p8 As Integer, _
                    ByVal p9 As Date, _
                    ByVal p10 As Integer, _
                    ByVal p11 As Integer, _
                    ByVal p12 As Integer, _
                    ByVal p13 As Integer, _
                    ByVal p14 As Integer, _
                    ByVal p15 As Integer, _
                    ByVal p16 As Integer) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, Date)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, Integer)
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, Integer)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, Integer)
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, Integer)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, Integer)
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, Integer)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, Integer)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, Date)
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, Integer)
      Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11, Integer)
      Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12, Integer)
      Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13, Integer)
      Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14, Integer)
      Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15, Integer)
      Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16, Integer)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As Integer, ByVal p3 As Integer, ByVal p4 As Integer, ByVal p5 As Integer, ByVal p6 As Integer, ByVal p7 As Integer, ByVal p8 As Integer, ByVal p9 As Date, ByVal p10 As Integer, ByVal p11 As Integer, ByVal p12 As Integer, ByVal p13 As Integer, ByVal p14 As Integer, ByVal p15 As Integer, ByVal p16 As Integer) As Integer
      Return Me.Update(p9, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class courseclassrelTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "CourseClassRel"
      tableMapping.ColumnMappings.Add("CourseName", "CourseName")
      tableMapping.ColumnMappings.Add("ClassName", "ClassName")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `courseclassrel` WHERE ((`CourseName` = @p1) AND (`ClassName` = @p2))" & _
          ""
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `courseclassrel` (`CourseName`, `ClassName`) VALUES (@p1, @p2)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `courseclassrel` SET `CourseName` = @p1, `ClassName` = @p2 WHERE ((`Course" & _
          "Name` = @p3) AND (`ClassName` = @p4))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "ClassName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `CourseName`, `ClassName` FROM `courseclassrel`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.courseclassrelDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.courseclassrelDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.courseclassrelDataTable = New HLDS.courseclassrelDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.courseclassrelDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "CourseClassRel")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As String, ByVal p2 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, String)
      End If
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As String, ByVal p2 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, String)
      End If
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As String, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
      If (p1 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p1")
      Else
        Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, String)
      End If
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String, ByVal p3 As String, ByVal p4 As String) As Integer
      Return Me.Update(p3, p2, p3, p4)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class studentTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "Student"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("Surname", "Surname")
      tableMapping.ColumnMappings.Add("Forename", "Forename")
      tableMapping.ColumnMappings.Add("Sex", "Sex")
      tableMapping.ColumnMappings.Add("YearOfBirth", "YearOfBirth")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `student` WHERE ((`PKey` = @p1) AND (`Surname` = @p2) AND (`Forename`" & _
          " = @p3) AND (`Sex` = @p4) AND (`YearOfBirth` = @p5))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Surname"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Forename"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "YearOfBirth"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `student` (`PKey`, `Surname`, `Forename`, `Sex`, `YearOfBirth`) VALUE" & _
          "S (@p1, @p2, @p3, @p4, @p5)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Surname"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Forename"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "YearOfBirth"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `student` SET `PKey` = @p1, `Surname` = @p2, `Forename` = @p3, `Sex` = @p4" & _
          ", `YearOfBirth` = @p5 WHERE ((`PKey` = @p6) AND (`Surname` = @p7) AND (`Forename" & _
          "` = @p8) AND (`Sex` = @p9) AND (`YearOfBirth` = @p10))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Surname"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Forename"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "YearOfBirth"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Surname"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Forename"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "YearOfBirth"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `Surname`, `Forename`, `Sex`, `YearOfBirth` FROM `student`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.studentDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.studentDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.studentDataTable = New HLDS.studentDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.studentDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "Student")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Date) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Date) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Date, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As Date) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, Date)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, System.Guid)
      If (p7 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p7")
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, String)
      End If
      If (p8 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p8")
      Else
        Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, String)
      End If
      If (p9 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p9")
      Else
        Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As Date, ByVal p6 As System.Guid, ByVal p7 As String, ByVal p8 As String, ByVal p9 As String, ByVal p10 As Date) As Integer
      Return Me.Update(p6, p2, p3, p4, p5, p6, p7, p8, p9, p10)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class studentcourserelTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "StudentCourseRel"
      tableMapping.ColumnMappings.Add("StudentPKey", "StudentPKey")
      tableMapping.ColumnMappings.Add("CourseName", "CourseName")
      tableMapping.ColumnMappings.Add("Year", "Year")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `studentcourserel` WHERE ((`StudentPKey` = @p1) AND (`CourseName` = @" & _
          "p2) AND (`Year` = @p3))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `studentcourserel` (`StudentPKey`, `CourseName`, `Year`) VALUES (@p1," & _
          " @p2, @p3)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `studentcourserel` SET `StudentPKey` = @p1, `CourseName` = @p2, `Year` = @" & _
          "p3 WHERE ((`StudentPKey` = @p4) AND (`CourseName` = @p5) AND (`Year` = @p6))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "StudentPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "CourseName"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.[Date]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Year
      param.IsNullable = True
      param.SourceColumn = "Year"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `StudentPKey`, `CourseName`, `Year` FROM `studentcourserel`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.studentcourserelDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.studentcourserelDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.studentcourserelDataTable = New HLDS.studentcourserelDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.studentcourserelDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "StudentCourseRel")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As Date) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As Date) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As Date, ByVal p4 As System.Guid, ByVal p5 As String, ByVal p6 As Date) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, Date)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, System.Guid)
      If (p5 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p5")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, Date)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update(ByVal p2 As String, ByVal p4 As System.Guid, ByVal p5 As String, ByVal p6 As Date) As Integer
      Return Me.Update(p4, p2, p6, p4, p5, p6)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class traditionaldisciplineTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "TraditionalDiscipline"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("Type", "Type")
      tableMapping.ColumnMappings.Add("Sex", "Sex")
      tableMapping.ColumnMappings.Add("Name", "Name")
      tableMapping.ColumnMappings.Add("UnitSymbol", "UnitSymbol")
      tableMapping.ColumnMappings.Add("Distance", "Distance")
      tableMapping.ColumnMappings.Add("Overhead", "Overhead")
      tableMapping.ColumnMappings.Add("ConstantA", "ConstantA")
      tableMapping.ColumnMappings.Add("ConstantC", "ConstantC")
      tableMapping.ColumnMappings.Add("Measurement", "Measurement")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `traditionaldiscipline` WHERE ((`PKey` = @p1) AND (`Type` = @p2) AND " & _
          "(`Sex` = @p3) AND (`Name` = @p4) AND (`UnitSymbol` = @p5) AND ((@p6 = 1 AND `Dis" & _
          "tance` IS NULL) OR (`Distance` = @p7)) AND ((@p8 = 1 AND `Overhead` IS NULL) OR " & _
          "(`Overhead` = @p9)) AND (`ConstantA` = @p10) AND (`ConstantC` = @p11) AND ((@p12" & _
          " = 1 AND `Measurement` IS NULL) OR (`Measurement` = @p13)))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "UnitSymbol"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantA"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantC"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `traditionaldiscipline` (`PKey`, `Type`, `Sex`, `Name`, `UnitSymbol`," & _
          " `Distance`, `Overhead`, `ConstantA`, `ConstantC`, `Measurement`) VALUES (@p1, @" & _
          "p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "UnitSymbol"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantA"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantC"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `traditionaldiscipline` SET `PKey` = @p1, `Type` = @p2, `Sex` = @p3, `Name" & _
          "` = @p4, `UnitSymbol` = @p5, `Distance` = @p6, `Overhead` = @p7, `ConstantA` = @" & _
          "p8, `ConstantC` = @p9, `Measurement` = @p10 WHERE ((`PKey` = @p11) AND (`Type` =" & _
          " @p12) AND (`Sex` = @p13) AND (`Name` = @p14) AND (`UnitSymbol` = @p15) AND ((@p" & _
          "16 = 1 AND `Distance` IS NULL) OR (`Distance` = @p17)) AND ((@p18 = 1 AND `Overh" & _
          "ead` IS NULL) OR (`Overhead` = @p19)) AND (`ConstantA` = @p20) AND (`ConstantC` " & _
          "= @p21) AND ((@p22 = 1 AND `Measurement` IS NULL) OR (`Measurement` = @p23)))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "UnitSymbol"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantA"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantC"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Type"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Sex"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p14"
      param.DbType = Global.System.Data.DbType.[String]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
      param.IsNullable = True
      param.SourceColumn = "Name"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p15"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "UnitSymbol"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p16"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p17"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Distance"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p18"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p19"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "Overhead"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p20"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantA"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p21"
      param.DbType = Global.System.Data.DbType.[Single]
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Float
      param.IsNullable = True
      param.SourceColumn = "ConstantC"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p22"
      param.DbType = Global.System.Data.DbType.Int32
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Int32
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      param.SourceColumnNullMapping = True
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p23"
      param.DbType = Global.System.Data.DbType.StringFixedLength
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.[String]
      param.IsNullable = True
      param.SourceColumn = "Measurement"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `Type`, `Sex`, `Name`, `UnitSymbol`, `Distance`, `Overhead`, `Cons" & _
          "tantA`, `ConstantC`, `Measurement` FROM `traditionaldiscipline`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.traditionaldisciplineDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.traditionaldisciplineDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.traditionaldisciplineDataTable = New HLDS.traditionaldisciplineDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.traditionaldisciplineDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "TraditionalDiscipline")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p7 As Global.System.Nullable(Of Integer), ByVal p9 As Global.System.Nullable(Of Single), ByVal p10 As Single, ByVal p11 As Single, ByVal p13 As String) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, String)
      End If
      If (p5 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p5")
      Else
        Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, String)
      End If
      If (p7.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7.Value, Integer)
      Else
        Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
      End If
      If (p9.HasValue = True) Then
        Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9.Value, Single)
      Else
        Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
      End If
      Me.Adapter.DeleteCommand.Parameters(9).Value = CType(p10, Single)
      Me.Adapter.DeleteCommand.Parameters(10).Value = CType(p11, Single)
      If (p13 Is Nothing) Then
        Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1, Object)
        Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0, Object)
        Me.Adapter.DeleteCommand.Parameters(12).Value = CType(p13, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As String, ByVal p3 As String, ByVal p4 As String, ByVal p5 As String, ByVal p6 As Global.System.Nullable(Of Integer), ByVal p7 As Global.System.Nullable(Of Single), ByVal p8 As Single, ByVal p9 As Single, ByVal p10 As String) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, String)
      End If
      If (p5 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p5")
      Else
        Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, String)
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6.Value, Integer)
      Else
        Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      If (p7.HasValue = True) Then
        Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7.Value, Single)
      Else
        Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
      End If
      Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8, Single)
      Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9, Single)
      If (p10 Is Nothing) Then
        Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.InsertCommand.Parameters(9).Value = CType(p10, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p1 As System.Guid, _
                    ByVal p2 As String, _
                    ByVal p3 As String, _
                    ByVal p4 As String, _
                    ByVal p5 As String, _
                    ByVal p6 As Global.System.Nullable(Of Integer), _
                    ByVal p7 As Global.System.Nullable(Of Single), _
                    ByVal p8 As Single, _
                    ByVal p9 As Single, _
                    ByVal p10 As String, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As String, _
                    ByVal p13 As String, _
                    ByVal p14 As String, _
                    ByVal p15 As String, _
                    ByVal p17 As Global.System.Nullable(Of Integer), _
                    ByVal p19 As Global.System.Nullable(Of Single), _
                    ByVal p20 As Single, _
                    ByVal p21 As Single, _
                    ByVal p23 As String) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      If (p2 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p2")
      Else
        Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, String)
      End If
      If (p3 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p3")
      Else
        Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, String)
      End If
      If (p4 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p4")
      Else
        Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, String)
      End If
      If (p5 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p5")
      Else
        Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, String)
      End If
      If (p6.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6.Value, Integer)
      Else
        Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
      End If
      If (p7.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
      End If
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, Single)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, Single)
      If (p10 Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, String)
      End If
      Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11, System.Guid)
      If (p12 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p12")
      Else
        Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12, String)
      End If
      If (p13 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p13")
      Else
        Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13, String)
      End If
      If (p14 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p14")
      Else
        Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14, String)
      End If
      If (p15 Is Nothing) Then
        Throw New Global.System.ArgumentNullException("p15")
      Else
        Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15, String)
      End If
      If (p17.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17.Value, Integer)
      Else
        Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
      End If
      If (p19.HasValue = True) Then
        Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(18).Value = CType(p19.Value, Single)
      Else
        Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
      End If
      Me.Adapter.UpdateCommand.Parameters(19).Value = CType(p20, Single)
      Me.Adapter.UpdateCommand.Parameters(20).Value = CType(p21, Single)
      If (p23 Is Nothing) Then
        Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1, Object)
        Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
      Else
        Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0, Object)
        Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p23, String)
      End If
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p2 As String, _
                    ByVal p3 As String, _
                    ByVal p4 As String, _
                    ByVal p5 As String, _
                    ByVal p6 As Global.System.Nullable(Of Integer), _
                    ByVal p7 As Global.System.Nullable(Of Single), _
                    ByVal p8 As Single, _
                    ByVal p9 As Single, _
                    ByVal p10 As String, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As String, _
                    ByVal p13 As String, _
                    ByVal p14 As String, _
                    ByVal p15 As String, _
                    ByVal p17 As Global.System.Nullable(Of Integer), _
                    ByVal p19 As Global.System.Nullable(Of Single), _
                    ByVal p20 As Single, _
                    ByVal p21 As Single, _
                    ByVal p23 As String) As Integer
      Return Me.Update(p11, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p17, p19, p20, p21, p23)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class traditionaldisciplinecollectionTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "TraditionalDisciplineCollection"
      tableMapping.ColumnMappings.Add("PKey", "PKey")
      tableMapping.ColumnMappings.Add("MaleSprintPKey", "MaleSprintPKey")
      tableMapping.ColumnMappings.Add("MaleJumpPKey", "MaleJumpPKey")
      tableMapping.ColumnMappings.Add("MaleThrowPKey", "MaleThrowPKey")
      tableMapping.ColumnMappings.Add("MaleMiddleDistancePKey", "MaleMiddleDistancePKey")
      tableMapping.ColumnMappings.Add("FemaleSprintPKey", "FemaleSprintPKey")
      tableMapping.ColumnMappings.Add("FemaleJumpPKey", "FemaleJumpPKey")
      tableMapping.ColumnMappings.Add("FemaleThrowPKey", "FemaleThrowPKey")
      tableMapping.ColumnMappings.Add("FemaleMiddleDistancePKey", "FemaleMiddleDistancePKey")
      Me._adapter.TableMappings.Add(tableMapping)
      Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.DeleteCommand.Connection = Me.Connection
      Me._adapter.DeleteCommand.CommandText = "DELETE FROM `traditionaldisciplinecollection` WHERE ((`PKey` = @p1) AND (`MaleSpr" & _
          "intPKey` = @p2) AND (`MaleJumpPKey` = @p3) AND (`MaleThrowPKey` = @p4) AND (`Mal" & _
          "eMiddleDistancePKey` = @p5) AND (`FemaleSprintPKey` = @p6) AND (`FemaleJumpPKey`" & _
          " = @p7) AND (`FemaleThrowPKey` = @p8) AND (`FemaleMiddleDistancePKey` = @p9))"
      Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
      Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.DeleteCommand.Parameters.Add(param)
      Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.InsertCommand.Connection = Me.Connection
      Me._adapter.InsertCommand.CommandText = "INSERT INTO `traditionaldisciplinecollection` (`PKey`, `MaleSprintPKey`, `MaleJum" & _
          "pPKey`, `MaleThrowPKey`, `MaleMiddleDistancePKey`, `FemaleSprintPKey`, `FemaleJu" & _
          "mpPKey`, `FemaleThrowPKey`, `FemaleMiddleDistancePKey`) VALUES (@p1, @p2, @p3, @" & _
          "p4, @p5, @p6, @p7, @p8, @p9)"
      Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      Me._adapter.InsertCommand.Parameters.Add(param)
      Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._adapter.UpdateCommand.Connection = Me.Connection
      Me._adapter.UpdateCommand.CommandText = "UPDATE `traditionaldisciplinecollection` SET `PKey` = @p1, `MaleSprintPKey` = @p2" & _
          ", `MaleJumpPKey` = @p3, `MaleThrowPKey` = @p4, `MaleMiddleDistancePKey` = @p5, `" & _
          "FemaleSprintPKey` = @p6, `FemaleJumpPKey` = @p7, `FemaleThrowPKey` = @p8, `Femal" & _
          "eMiddleDistancePKey` = @p9 WHERE ((`PKey` = @p10) AND (`MaleSprintPKey` = @p11) " & _
          "AND (`MaleJumpPKey` = @p12) AND (`MaleThrowPKey` = @p13) AND (`MaleMiddleDistanc" & _
          "ePKey` = @p14) AND (`FemaleSprintPKey` = @p15) AND (`FemaleJumpPKey` = @p16) AND" & _
          " (`FemaleThrowPKey` = @p17) AND (`FemaleMiddleDistancePKey` = @p18))"
      Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p1"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p2"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p3"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p4"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p5"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p6"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p7"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p8"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p9"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p10"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "PKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p11"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p12"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p13"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p14"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "MaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p15"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleSprintPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p16"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleJumpPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p17"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleThrowPKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
      param = New Global.MySql.Data.MySqlClient.MySqlParameter()
      param.ParameterName = "@p18"
      param.DbType = Global.System.Data.DbType.Guid
      param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.Guid
      param.IsNullable = True
      param.SourceColumn = "FemaleMiddleDistancePKey"
      param.SourceVersion = Global.System.Data.DataRowVersion.Original
      Me._adapter.UpdateCommand.Parameters.Add(param)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `PKey`, `MaleSprintPKey`, `MaleJumpPKey`, `MaleThrowPKey`, `MaleMiddleDist" & _
          "ancePKey`, `FemaleSprintPKey`, `FemaleJumpPKey`, `FemaleThrowPKey`, `FemaleMiddl" & _
          "eDistancePKey` FROM `traditionaldisciplinecollection`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.traditionaldisciplinecollectionDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.traditionaldisciplinecollectionDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.traditionaldisciplinecollectionDataTable = New HLDS.traditionaldisciplinecollectionDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataTable As HLDS.traditionaldisciplinecollectionDataTable) As Integer
      Return Me.Adapter.Update(dataTable)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataSet As HLDS) As Integer
      Return Me.Adapter.Update(dataSet, "TraditionalDisciplineCollection")
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
      Return Me.Adapter.Update(dataRows)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
    Public Overridable Overloads Function Delete(ByVal p1 As System.Guid, ByVal p2 As System.Guid, ByVal p3 As System.Guid, ByVal p4 As System.Guid, ByVal p5 As System.Guid, ByVal p6 As System.Guid, ByVal p7 As System.Guid, ByVal p8 As System.Guid, ByVal p9 As System.Guid) As Integer
      Me.Adapter.DeleteCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.DeleteCommand.Parameters(8).Value = CType(p9, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
      If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.DeleteCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.DeleteCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
    Public Overridable Overloads Function Insert(ByVal p1 As System.Guid, ByVal p2 As System.Guid, ByVal p3 As System.Guid, ByVal p4 As System.Guid, ByVal p5 As System.Guid, ByVal p6 As System.Guid, ByVal p7 As System.Guid, ByVal p8 As System.Guid, ByVal p9 As System.Guid) As Integer
      Me.Adapter.InsertCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.InsertCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.InsertCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.InsertCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.InsertCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.InsertCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.InsertCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.InsertCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.InsertCommand.Parameters(8).Value = CType(p9, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
      If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.InsertCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.InsertCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p1 As System.Guid, _
                    ByVal p2 As System.Guid, _
                    ByVal p3 As System.Guid, _
                    ByVal p4 As System.Guid, _
                    ByVal p5 As System.Guid, _
                    ByVal p6 As System.Guid, _
                    ByVal p7 As System.Guid, _
                    ByVal p8 As System.Guid, _
                    ByVal p9 As System.Guid, _
                    ByVal p10 As System.Guid, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As System.Guid, _
                    ByVal p13 As System.Guid, _
                    ByVal p14 As System.Guid, _
                    ByVal p15 As System.Guid, _
                    ByVal p16 As System.Guid, _
                    ByVal p17 As System.Guid, _
                    ByVal p18 As System.Guid) As Integer
      Me.Adapter.UpdateCommand.Parameters(0).Value = CType(p1, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(1).Value = CType(p2, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(2).Value = CType(p3, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(3).Value = CType(p4, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(4).Value = CType(p5, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(5).Value = CType(p6, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(6).Value = CType(p7, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(7).Value = CType(p8, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(8).Value = CType(p9, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(9).Value = CType(p10, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(10).Value = CType(p11, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(11).Value = CType(p12, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(12).Value = CType(p13, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(13).Value = CType(p14, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(14).Value = CType(p15, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(15).Value = CType(p16, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(16).Value = CType(p17, System.Guid)
      Me.Adapter.UpdateCommand.Parameters(17).Value = CType(p18, System.Guid)
      Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
      If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                  <> Global.System.Data.ConnectionState.Open) Then
        Me.Adapter.UpdateCommand.Connection.Open()
      End If
      Try
        Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
        Return returnValue
      Finally
        If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
          Me.Adapter.UpdateCommand.Connection.Close()
        End If
      End Try
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
    Public Overridable Overloads Function Update( _
                    ByVal p2 As System.Guid, _
                    ByVal p3 As System.Guid, _
                    ByVal p4 As System.Guid, _
                    ByVal p5 As System.Guid, _
                    ByVal p6 As System.Guid, _
                    ByVal p7 As System.Guid, _
                    ByVal p8 As System.Guid, _
                    ByVal p9 As System.Guid, _
                    ByVal p10 As System.Guid, _
                    ByVal p11 As System.Guid, _
                    ByVal p12 As System.Guid, _
                    ByVal p13 As System.Guid, _
                    ByVal p14 As System.Guid, _
                    ByVal p15 As System.Guid, _
                    ByVal p16 As System.Guid, _
                    ByVal p17 As System.Guid, _
                    ByVal p18 As System.Guid) As Integer
      Return Me.Update(p10, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18)
    End Function
  End Class

  '''<summary>
  '''Represents the connection and commands used to retrieve and save data.
  '''</summary>
  <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
   Global.System.ComponentModel.ToolboxItem(True), _
   Global.System.ComponentModel.DataObjectAttribute(True), _
   Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
      ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
   Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
  Partial Public Class YearsWithStudentDataTableAdapter
    Inherits Global.System.ComponentModel.Component

    Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter

    Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection

    Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction

    Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand

    Private _clearBeforeFill As Boolean

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
      MyBase.New()
      Me.ClearBeforeFill = True
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
      Get
        If (Me._adapter Is Nothing) Then
          Me.InitAdapter()
        End If
        Return Me._adapter
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
      Get
        If (Me._connection Is Nothing) Then
          Me.InitConnection()
        End If
        Return Me._connection
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlConnection)
        Me._connection = value
        If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
          Me.Adapter.InsertCommand.Connection = value
        End If
        If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
          Me.Adapter.DeleteCommand.Connection = value
        End If
        If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
          Me.Adapter.UpdateCommand.Connection = value
        End If
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          If (Not (Me.CommandCollection(i)) Is Nothing) Then
            CType(Me.CommandCollection(i), Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
          End If
          i = (i + 1)
        Loop
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
      Get
        Return Me._transaction
      End Get
      Set(value As Global.MySql.Data.MySqlClient.MySqlTransaction)
        Me._transaction = value
        Dim i As Integer = 0
        Do While (i < Me.CommandCollection.Length)
          Me.CommandCollection(i).Transaction = Me._transaction
          i = (i + 1)
        Loop
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
          Me.Adapter.DeleteCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
          Me.Adapter.InsertCommand.Transaction = Me._transaction
        End If
        If ((Not (Me.Adapter) Is Nothing) _
                    AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
          Me.Adapter.UpdateCommand.Transaction = Me._transaction
        End If
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
      Get
        If (Me._commandCollection Is Nothing) Then
          Me.InitCommandCollection()
        End If
        Return Me._commandCollection
      End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Property ClearBeforeFill() As Boolean
      Get
        Return Me._clearBeforeFill
      End Get
      Set(value As Boolean)
        Me._clearBeforeFill = value
      End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitAdapter()
      Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
      Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
      tableMapping.SourceTable = "Table"
      tableMapping.DataSetTable = "YearsWithStudentData"
      tableMapping.ColumnMappings.Add("Year", "Year")
      Me._adapter.TableMappings.Add(tableMapping)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitConnection()
      Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
      Me._connection.ConnectionString = Global.HonglornApp.My.MySettings.Default.oConnectionStringHonglorn
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitCommandCollection()
      Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
      Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
      Me._commandCollection(0).Connection = Me.Connection
      Me._commandCollection(0).CommandText = "SELECT `Year` FROM `honglorn`.`validyears`"
      Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
    Public Overridable Overloads Function Fill(ByVal dataTable As HLDS.YearsWithStudentDataDataTable) As Integer
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      If (Me.ClearBeforeFill = True) Then
        dataTable.Clear()
      End If
      Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
      Return returnValue
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
     Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
    Public Overridable Overloads Function GetData() As HLDS.YearsWithStudentDataDataTable
      Me.Adapter.SelectCommand = Me.CommandCollection(0)
      Dim dataTable As HLDS.YearsWithStudentDataDataTable = New HLDS.YearsWithStudentDataDataTable()
      Me.Adapter.Fill(dataTable)
      Return dataTable
    End Function
  End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _classTableAdapter As classTableAdapter
        
        Private _traditionalreportmetaTableAdapter As traditionalreportmetaTableAdapter
        
        Private _classdisciplinerelTableAdapter As classdisciplinerelTableAdapter
        
        Private _competitionTableAdapter As competitionTableAdapter
        
        Private _competitiondisciplineTableAdapter As competitiondisciplineTableAdapter
        
        Private _competitiondisciplinecollectionTableAdapter As competitiondisciplinecollectionTableAdapter
        
        Private _competitionreportmetaTableAdapter As competitionreportmetaTableAdapter
        
        Private _courseclassrelTableAdapter As courseclassrelTableAdapter
        
        Private _studentTableAdapter As studentTableAdapter
        
        Private _studentcourserelTableAdapter As studentcourserelTableAdapter
        
        Private _traditionaldisciplineTableAdapter As traditionaldisciplineTableAdapter
        
        Private _traditionaldisciplinecollectionTableAdapter As traditionaldisciplinecollectionTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property classTableAdapter() As classTableAdapter
            Get
                Return Me._classTableAdapter
            End Get
            Set
                Me._classTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property traditionalreportmetaTableAdapter() As traditionalreportmetaTableAdapter
            Get
                Return Me._traditionalreportmetaTableAdapter
            End Get
            Set
                Me._traditionalreportmetaTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property classdisciplinerelTableAdapter() As classdisciplinerelTableAdapter
            Get
                Return Me._classdisciplinerelTableAdapter
            End Get
            Set
                Me._classdisciplinerelTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property competitionTableAdapter() As competitionTableAdapter
            Get
                Return Me._competitionTableAdapter
            End Get
            Set
                Me._competitionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property competitiondisciplineTableAdapter() As competitiondisciplineTableAdapter
            Get
                Return Me._competitiondisciplineTableAdapter
            End Get
            Set
                Me._competitiondisciplineTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property competitiondisciplinecollectionTableAdapter() As competitiondisciplinecollectionTableAdapter
            Get
                Return Me._competitiondisciplinecollectionTableAdapter
            End Get
            Set
                Me._competitiondisciplinecollectionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property competitionreportmetaTableAdapter() As competitionreportmetaTableAdapter
            Get
                Return Me._competitionreportmetaTableAdapter
            End Get
            Set
                Me._competitionreportmetaTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property courseclassrelTableAdapter() As courseclassrelTableAdapter
            Get
                Return Me._courseclassrelTableAdapter
            End Get
            Set
                Me._courseclassrelTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property studentTableAdapter() As studentTableAdapter
            Get
                Return Me._studentTableAdapter
            End Get
            Set
                Me._studentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property studentcourserelTableAdapter() As studentcourserelTableAdapter
            Get
                Return Me._studentcourserelTableAdapter
            End Get
            Set
                Me._studentcourserelTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property traditionaldisciplineTableAdapter() As traditionaldisciplineTableAdapter
            Get
                Return Me._traditionaldisciplineTableAdapter
            End Get
            Set
                Me._traditionaldisciplineTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property traditionaldisciplinecollectionTableAdapter() As traditionaldisciplinecollectionTableAdapter
            Get
                Return Me._traditionaldisciplinecollectionTableAdapter
            End Get
            Set
                Me._traditionaldisciplinecollectionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._classTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._classTableAdapter.Connection) Is Nothing)) Then
                    Return Me._classTableAdapter.Connection
                End If
                If ((Not (Me._traditionalreportmetaTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._traditionalreportmetaTableAdapter.Connection) Is Nothing)) Then
                    Return Me._traditionalreportmetaTableAdapter.Connection
                End If
                If ((Not (Me._classdisciplinerelTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._classdisciplinerelTableAdapter.Connection) Is Nothing)) Then
                    Return Me._classdisciplinerelTableAdapter.Connection
                End If
                If ((Not (Me._competitionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._competitionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._competitionTableAdapter.Connection
                End If
                If ((Not (Me._competitiondisciplineTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._competitiondisciplineTableAdapter.Connection) Is Nothing)) Then
                    Return Me._competitiondisciplineTableAdapter.Connection
                End If
                If ((Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._competitiondisciplinecollectionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._competitiondisciplinecollectionTableAdapter.Connection
                End If
                If ((Not (Me._competitionreportmetaTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._competitionreportmetaTableAdapter.Connection) Is Nothing)) Then
                    Return Me._competitionreportmetaTableAdapter.Connection
                End If
                If ((Not (Me._courseclassrelTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._courseclassrelTableAdapter.Connection) Is Nothing)) Then
                    Return Me._courseclassrelTableAdapter.Connection
                End If
                If ((Not (Me._studentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentTableAdapter.Connection
                End If
                If ((Not (Me._studentcourserelTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._studentcourserelTableAdapter.Connection) Is Nothing)) Then
                    Return Me._studentcourserelTableAdapter.Connection
                End If
                If ((Not (Me._traditionaldisciplineTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._traditionaldisciplineTableAdapter.Connection) Is Nothing)) Then
                    Return Me._traditionaldisciplineTableAdapter.Connection
                End If
                If ((Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._traditionaldisciplinecollectionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._traditionaldisciplinecollectionTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._classTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._competitionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As HLDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._classTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._class.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._classTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.competitiondiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._competitiondisciplineTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.traditionaldiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._traditionaldisciplineTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.competitiondisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._competitiondisciplinecollectionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.courseclassrel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._courseclassrelTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.traditionaldisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._traditionaldisciplinecollectionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.traditionalreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._traditionalreportmetaTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.classdisciplinerel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._classdisciplinerelTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._competitionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.competition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._competitionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.competitionreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._competitionreportmetaTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.studentcourserel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._studentcourserelTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As HLDS, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._classTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._class.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._classTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.competitiondiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._competitiondisciplineTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.traditionaldiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._traditionaldisciplineTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.competitiondisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._competitiondisciplinecollectionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.courseclassrel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._courseclassrelTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.traditionaldisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._traditionaldisciplinecollectionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.traditionalreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._traditionalreportmetaTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.classdisciplinerel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._classdisciplinerelTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._competitionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.competition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._competitionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.competitionreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._competitionreportmetaTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.studentcourserel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._studentcourserelTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As HLDS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.studentcourserel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentcourserelTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.competitionreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._competitionreportmetaTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._competitionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.competition.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._competitionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.classdisciplinerel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._classdisciplinerelTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.traditionalreportmeta.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._traditionalreportmetaTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.traditionaldisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._traditionaldisciplinecollectionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._studentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.student.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._studentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.courseclassrel.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._courseclassrelTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.competitiondisciplinecollection.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._competitiondisciplinecollectionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.traditionaldiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._traditionaldisciplineTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.competitiondiscipline.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._competitiondisciplineTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._classTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._class.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._classTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As HLDS) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._classTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._classTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._traditionalreportmetaTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._traditionalreportmetaTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._classdisciplinerelTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._classdisciplinerelTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._competitionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._competitionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._competitiondisciplineTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._competitiondisciplineTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._competitiondisciplinecollectionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._competitionreportmetaTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._competitionreportmetaTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._courseclassrelTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._courseclassrelTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._studentcourserelTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._studentcourserelTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._traditionaldisciplineTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._traditionaldisciplineTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._traditionaldisciplinecollectionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._classTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._classTableAdapter, Me._classTableAdapter.Connection)
                    Me._classTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._classTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._classTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._classTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._classTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._traditionalreportmetaTableAdapter, Me._traditionalreportmetaTableAdapter.Connection)
                    Me._traditionalreportmetaTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionalreportmetaTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._traditionalreportmetaTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._traditionalreportmetaTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._traditionalreportmetaTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._classdisciplinerelTableAdapter, Me._classdisciplinerelTableAdapter.Connection)
                    Me._classdisciplinerelTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._classdisciplinerelTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._classdisciplinerelTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._classdisciplinerelTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._classdisciplinerelTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._competitionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._competitionTableAdapter, Me._competitionTableAdapter.Connection)
                    Me._competitionTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitionTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._competitionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._competitionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._competitionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._competitiondisciplineTableAdapter, Me._competitiondisciplineTableAdapter.Connection)
                    Me._competitiondisciplineTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitiondisciplineTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._competitiondisciplineTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._competitiondisciplineTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._competitiondisciplineTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._competitiondisciplinecollectionTableAdapter, Me._competitiondisciplinecollectionTableAdapter.Connection)
                    Me._competitiondisciplinecollectionTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitiondisciplinecollectionTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._competitiondisciplinecollectionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._competitiondisciplinecollectionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._competitiondisciplinecollectionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._competitionreportmetaTableAdapter, Me._competitionreportmetaTableAdapter.Connection)
                    Me._competitionreportmetaTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitionreportmetaTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._competitionreportmetaTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._competitionreportmetaTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._competitionreportmetaTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._courseclassrelTableAdapter, Me._courseclassrelTableAdapter.Connection)
                    Me._courseclassrelTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._courseclassrelTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._courseclassrelTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._courseclassrelTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._courseclassrelTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentTableAdapter, Me._studentTableAdapter.Connection)
                    Me._studentTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studentTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._studentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._studentcourserelTableAdapter, Me._studentcourserelTableAdapter.Connection)
                    Me._studentcourserelTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studentcourserelTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._studentcourserelTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._studentcourserelTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._studentcourserelTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._traditionaldisciplineTableAdapter, Me._traditionaldisciplineTableAdapter.Connection)
                    Me._traditionaldisciplineTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionaldisciplineTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._traditionaldisciplineTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._traditionaldisciplineTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._traditionaldisciplineTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._traditionaldisciplinecollectionTableAdapter, Me._traditionaldisciplinecollectionTableAdapter.Connection)
                    Me._traditionaldisciplinecollectionTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionaldisciplinecollectionTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._traditionaldisciplinecollectionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._traditionaldisciplinecollectionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._traditionaldisciplinecollectionTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._classTableAdapter) Is Nothing) Then
                    Me._classTableAdapter.Connection = CType(revertConnections(Me._classTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._classTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._traditionalreportmetaTableAdapter) Is Nothing) Then
                    Me._traditionalreportmetaTableAdapter.Connection = CType(revertConnections(Me._traditionalreportmetaTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionalreportmetaTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._classdisciplinerelTableAdapter) Is Nothing) Then
                    Me._classdisciplinerelTableAdapter.Connection = CType(revertConnections(Me._classdisciplinerelTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._classdisciplinerelTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._competitionTableAdapter) Is Nothing) Then
                    Me._competitionTableAdapter.Connection = CType(revertConnections(Me._competitionTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._competitiondisciplineTableAdapter) Is Nothing) Then
                    Me._competitiondisciplineTableAdapter.Connection = CType(revertConnections(Me._competitiondisciplineTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitiondisciplineTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._competitiondisciplinecollectionTableAdapter) Is Nothing) Then
                    Me._competitiondisciplinecollectionTableAdapter.Connection = CType(revertConnections(Me._competitiondisciplinecollectionTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitiondisciplinecollectionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._competitionreportmetaTableAdapter) Is Nothing) Then
                    Me._competitionreportmetaTableAdapter.Connection = CType(revertConnections(Me._competitionreportmetaTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._competitionreportmetaTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._courseclassrelTableAdapter) Is Nothing) Then
                    Me._courseclassrelTableAdapter.Connection = CType(revertConnections(Me._courseclassrelTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._courseclassrelTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentTableAdapter) Is Nothing) Then
                    Me._studentTableAdapter.Connection = CType(revertConnections(Me._studentTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._studentcourserelTableAdapter) Is Nothing) Then
                    Me._studentcourserelTableAdapter.Connection = CType(revertConnections(Me._studentcourserelTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._studentcourserelTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._traditionaldisciplineTableAdapter) Is Nothing) Then
                    Me._traditionaldisciplineTableAdapter.Connection = CType(revertConnections(Me._traditionaldisciplineTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionaldisciplineTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._traditionaldisciplinecollectionTableAdapter) Is Nothing) Then
                    Me._traditionaldisciplinecollectionTableAdapter.Connection = CType(revertConnections(Me._traditionaldisciplinecollectionTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._traditionaldisciplinecollectionTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
