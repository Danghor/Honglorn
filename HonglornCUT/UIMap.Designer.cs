// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace HonglornCUT
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Tries to start the import process with an empty path. Should show an error message.
        /// </summary>
        public void ErrorShownOnImportEmptyPath()
        {
            #region Variable Declarations
            WpfButton uIImportstartenButton = this.UIHonglornWindow.UIItemTabList.UISchülerimportierenTabPage.UIImportstartenButton;
            #endregion

            // Click 'Import starten' button
            Mouse.Click(uIImportstartenButton, new Point(794, 8));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfCustom uIErrorCustom = this.UIHonglornWindow.UIErrorCustom;
            #endregion

            // Verify that the 'Name' property of 'Error' custom control equals 'Error'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIErrorCustomName, uIErrorCustom.Name, "No Error displayed");
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public UIHonglornWindow UIHonglornWindow
        {
            get
            {
                if ((this.mUIHonglornWindow == null))
                {
                    this.mUIHonglornWindow = new UIHonglornWindow();
                }
                return this.mUIHonglornWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private UIHonglornWindow mUIHonglornWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of 'Error' custom control equals 'Error'
        /// </summary>
        public string UIErrorCustomName = "Error";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIHonglornWindow : WpfWindow
    {
        
        public UIHonglornWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Honglorn";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Honglorn");
            #endregion
        }
        
        #region Properties
        public UIItemTabList UIItemTabList
        {
            get
            {
                if ((this.mUIItemTabList == null))
                {
                    this.mUIItemTabList = new UIItemTabList(this);
                }
                return this.mUIItemTabList;
            }
        }
        
        public WpfCustom UIErrorCustom
        {
            get
            {
                if ((this.mUIErrorCustom == null))
                {
                    this.mUIErrorCustom = new WpfCustom(this);
                    #region Search Criteria
                    this.mUIErrorCustom.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MessageDialog";
                    this.mUIErrorCustom.SearchProperties[WpfControl.PropertyNames.Name] = "Error";
                    this.mUIErrorCustom.WindowTitles.Add("Honglorn");
                    #endregion
                }
                return this.mUIErrorCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIItemTabList mUIItemTabList;
        
        private WpfCustom mUIErrorCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemTabList : WpfTabList
    {
        
        public UIItemTabList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Honglorn");
            #endregion
        }
        
        #region Properties
        public UISchülerimportierenTabPage UISchülerimportierenTabPage
        {
            get
            {
                if ((this.mUISchülerimportierenTabPage == null))
                {
                    this.mUISchülerimportierenTabPage = new UISchülerimportierenTabPage(this);
                }
                return this.mUISchülerimportierenTabPage;
            }
        }
        #endregion
        
        #region Fields
        private UISchülerimportierenTabPage mUISchülerimportierenTabPage;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UISchülerimportierenTabPage : WpfTabPage
    {
        
        public UISchülerimportierenTabPage(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTabPage.PropertyNames.Name] = "Schüler importieren";
            this.WindowTitles.Add("Honglorn");
            #endregion
        }
        
        #region Properties
        public WpfButton UIImportstartenButton
        {
            get
            {
                if ((this.mUIImportstartenButton == null))
                {
                    this.mUIImportstartenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIImportstartenButton.SearchProperties[WpfButton.PropertyNames.Name] = "Import starten";
                    this.mUIImportstartenButton.WindowTitles.Add("Honglorn");
                    #endregion
                }
                return this.mUIImportstartenButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIImportstartenButton;
        #endregion
    }
}
